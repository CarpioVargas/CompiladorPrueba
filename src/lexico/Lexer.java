/* The following code was generated by JFlex 1.6.0 */

package lexico;
import static lexico.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>C:/Users/Luis/Documents/NetBeansProjects/Lexico/src/lexico/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\20\1\12\1\13\1\13\1\12\22\0\1\5\1\22\1\4"+
    "\1\0\1\15\1\102\1\35\1\14\1\37\1\40\1\11\1\23\1\106"+
    "\1\3\1\7\1\10\12\2\1\63\1\17\1\74\1\21\1\52\1\51"+
    "\1\0\1\47\1\6\1\45\1\60\1\72\1\71\1\6\1\100\1\61"+
    "\2\6\1\46\1\76\1\75\1\101\1\103\1\6\1\62\1\50\1\77"+
    "\6\6\1\0\1\104\2\0\1\1\1\0\1\30\1\31\1\25\1\56"+
    "\1\24\1\57\1\73\1\26\1\53\1\105\1\44\1\42\1\64\1\43"+
    "\1\27\1\65\1\107\1\34\1\32\1\33\1\54\1\67\1\66\1\70"+
    "\1\36\1\6\1\55\1\41\1\16\7\0\1\13\u1fa2\0\1\13\1\13"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\1\5\1\2"+
    "\1\6\1\7\1\10\2\1\1\11\1\6\1\12\1\1"+
    "\1\13\7\2\1\1\1\11\1\1\2\2\2\1\1\2"+
    "\1\11\2\2\1\1\3\2\2\1\1\14\1\15\1\2"+
    "\1\16\1\17\1\20\1\21\1\22\1\0\1\23\1\24"+
    "\1\5\1\0\1\25\1\26\1\27\1\0\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\12\2\1\37\1\2"+
    "\1\40\5\2\1\41\1\42\7\0\1\43\1\44\3\2"+
    "\1\45\1\46\1\47\2\2\1\50\1\2\1\51\1\2"+
    "\1\52\4\2\1\53\5\2\1\54\1\55\1\56\1\57"+
    "\1\55\1\60\6\2\1\17\1\61\1\17\1\0\1\62"+
    "\1\63\1\30\1\64\1\65\20\2\1\66\4\2\7\0"+
    "\1\2\1\67\1\2\1\70\7\2\1\71\1\72\5\2"+
    "\1\73\2\2\1\74\1\0\1\75\1\76\6\2\1\77"+
    "\1\100\1\101\6\2\1\102\3\2\1\103\13\2\7\0"+
    "\1\104\17\2\1\105\1\2\1\0\10\2\1\106\3\2"+
    "\1\107\1\2\1\110\1\2\1\111\1\2\1\112\1\113"+
    "\2\2\1\114\1\115\3\2\5\0\1\116\2\0\1\2"+
    "\1\117\10\2\1\120\2\2\1\121\3\2\1\55\6\2"+
    "\1\122\2\2\1\123\6\2\1\124\1\125\1\2\3\0"+
    "\1\126\1\127\2\0\15\2\1\130\1\131\2\2\1\132"+
    "\7\2\1\133\4\2\1\134\1\0\1\135\2\0\1\2"+
    "\1\136\4\2\1\137\1\140\1\141\1\142\2\2\1\143"+
    "\1\2\1\144\1\145\5\2\1\146\1\147\1\150\1\2"+
    "\1\151\1\2\1\152\2\0\6\2\1\153\1\2\1\154"+
    "\2\2\1\155\2\2\1\156\1\2\1\157\1\2\1\160"+
    "\1\2\1\161\1\2\1\162\1\2\1\163\1\164\1\165"+
    "\2\2\1\166\1\167\4\2\1\170\1\171\1\172";

  private static int [] zzUnpackAction() {
    int [] result = new int[431];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\110\0\220\0\330\0\u0120\0\u0168\0\110\0\u01b0"+
    "\0\u01f8\0\u0240\0\u0288\0\u02d0\0\u0318\0\110\0\110\0\u0360"+
    "\0\u03a8\0\u03f0\0\u0438\0\u0480\0\u04c8\0\u0510\0\u0558\0\u05a0"+
    "\0\u05e8\0\u0630\0\u0678\0\u06c0\0\u0708\0\u0750\0\u0798\0\u07e0"+
    "\0\u0828\0\u0870\0\u08b8\0\u0900\0\u0948\0\u0990\0\u09d8\0\u0a20"+
    "\0\u0a68\0\u0ab0\0\110\0\110\0\u0af8\0\u0b40\0\u0b88\0\110"+
    "\0\110\0\110\0\u0168\0\110\0\110\0\u0bd0\0\u0c18\0\110"+
    "\0\u0c60\0\110\0\u0ca8\0\u0cf0\0\110\0\u0d38\0\110\0\u0d80"+
    "\0\110\0\110\0\u0dc8\0\u0e10\0\u0e58\0\u0ea0\0\u0ee8\0\u0f30"+
    "\0\u0f78\0\u0fc0\0\u1008\0\u1050\0\u01b0\0\u1098\0\u01b0\0\u10e0"+
    "\0\u1128\0\u1170\0\u11b8\0\u1200\0\110\0\110\0\u1248\0\u1290"+
    "\0\u12d8\0\u1320\0\u1368\0\u13b0\0\u13f8\0\110\0\110\0\u1440"+
    "\0\u1488\0\u14d0\0\110\0\110\0\u1518\0\u1560\0\u15a8\0\u01b0"+
    "\0\u15f0\0\110\0\u1638\0\u01b0\0\u1680\0\u16c8\0\u1710\0\u1758"+
    "\0\110\0\u17a0\0\u17e8\0\u1830\0\u1878\0\u18c0\0\110\0\u1908"+
    "\0\110\0\u1950\0\u1998\0\110\0\u19e0\0\u1a28\0\u1a70\0\u1ab8"+
    "\0\u1b00\0\u1b48\0\u1b90\0\u1bd8\0\u1c20\0\u1c68\0\110\0\110"+
    "\0\u1cb0\0\110\0\110\0\u1cf8\0\u1d40\0\u1d88\0\u1dd0\0\u1e18"+
    "\0\u1e60\0\u1ea8\0\u1ef0\0\u1f38\0\u1f80\0\u1fc8\0\u2010\0\u2058"+
    "\0\u20a0\0\u20e8\0\u2130\0\u01b0\0\u2178\0\u21c0\0\u2208\0\u2250"+
    "\0\u2298\0\u22e0\0\u2328\0\u2370\0\u23b8\0\u2400\0\u2448\0\u2490"+
    "\0\u01b0\0\u24d8\0\110\0\u2520\0\u2568\0\u25b0\0\u25f8\0\u2640"+
    "\0\u2688\0\u26d0\0\u01b0\0\u2718\0\u2760\0\u27a8\0\u27f0\0\u2838"+
    "\0\u2880\0\u01b0\0\u28c8\0\u2910\0\110\0\u2958\0\110\0\110"+
    "\0\u29a0\0\u29e8\0\u2a30\0\u2a78\0\u2ac0\0\u2b08\0\u0c18\0\u01b0"+
    "\0\u2b50\0\u2b98\0\u2be0\0\u2c28\0\u2c70\0\u2cb8\0\u2d00\0\u01b0"+
    "\0\u2d48\0\u2d90\0\u2dd8\0\u01b0\0\u2e20\0\u2e68\0\u2eb0\0\u2ef8"+
    "\0\u2f40\0\u2f88\0\u2fd0\0\u3018\0\u3060\0\u30a8\0\u30f0\0\u3138"+
    "\0\u3180\0\u31c8\0\u3210\0\u3258\0\u32a0\0\u32e8\0\u01b0\0\u3330"+
    "\0\u3378\0\u33c0\0\u3408\0\u3450\0\u3498\0\u34e0\0\u3528\0\u3570"+
    "\0\u35b8\0\u3600\0\u3648\0\u3690\0\u36d8\0\u3720\0\u01b0\0\u3768"+
    "\0\u37b0\0\u37f8\0\u3840\0\u3888\0\u38d0\0\u3918\0\u3960\0\u39a8"+
    "\0\u39f0\0\u01b0\0\u3a38\0\u3a80\0\u3ac8\0\u01b0\0\u3b10\0\u01b0"+
    "\0\u3b58\0\u01b0\0\u3ba0\0\u01b0\0\u01b0\0\u3be8\0\u3c30\0\u01b0"+
    "\0\u01b0\0\u3c78\0\u3cc0\0\u3d08\0\u3d50\0\u3d98\0\u3de0\0\u3e28"+
    "\0\u3e70\0\110\0\u3eb8\0\u3f00\0\u3f48\0\u01b0\0\u3f90\0\u3fd8"+
    "\0\u4020\0\u4068\0\u40b0\0\u40f8\0\u4140\0\u4188\0\u41d0\0\u4218"+
    "\0\u4260\0\u01b0\0\u42a8\0\u42f0\0\u4338\0\110\0\u4380\0\u43c8"+
    "\0\u4410\0\u4458\0\u44a0\0\u44e8\0\u01b0\0\u4530\0\u4578\0\u45c0"+
    "\0\u4608\0\u4650\0\u4698\0\u46e0\0\u4728\0\u4770\0\u01b0\0\u01b0"+
    "\0\u47b8\0\u4800\0\u4848\0\u4890\0\110\0\110\0\u48d8\0\u4920"+
    "\0\u4968\0\u49b0\0\u49f8\0\u4a40\0\u4a88\0\u4ad0\0\u4b18\0\u4b60"+
    "\0\u4ba8\0\u4bf0\0\u4c38\0\u4c80\0\u4cc8\0\u01b0\0\u01b0\0\u4d10"+
    "\0\u4d58\0\u01b0\0\u4da0\0\u4de8\0\u4e30\0\u4e78\0\u4ec0\0\u4f08"+
    "\0\u4f50\0\u01b0\0\u4f98\0\u4fe0\0\u5028\0\u5070\0\u50b8\0\u5100"+
    "\0\110\0\u5148\0\u5190\0\u51d8\0\u5220\0\u5268\0\u52b0\0\u52f8"+
    "\0\u5340\0\u01b0\0\u01b0\0\u01b0\0\u01b0\0\u5388\0\u53d0\0\u01b0"+
    "\0\u5418\0\u01b0\0\u01b0\0\u5460\0\u54a8\0\u54f0\0\u5538\0\u5580"+
    "\0\u01b0\0\u01b0\0\u01b0\0\u55c8\0\u01b0\0\u5610\0\110\0\u5658"+
    "\0\u56a0\0\u56e8\0\u5730\0\u5778\0\u57c0\0\u5808\0\u5850\0\u01b0"+
    "\0\u5898\0\u01b0\0\u58e0\0\u5928\0\u01b0\0\u5970\0\u59b8\0\u01b0"+
    "\0\u5a00\0\u01b0\0\u5a48\0\u01b0\0\u5a90\0\u01b0\0\u5ad8\0\u01b0"+
    "\0\u5b20\0\u01b0\0\u01b0\0\u01b0\0\u5b68\0\u5bb0\0\u01b0\0\u01b0"+
    "\0\u5bf8\0\u5c40\0\u5c88\0\u5cd0\0\u01b0\0\u01b0\0\u01b0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[431];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\7\1\0\1\14\1\15\1\16\1\17"+
    "\1\7\1\20\1\21\1\22\1\23\1\24\1\10\1\25"+
    "\1\26\1\27\1\30\1\10\1\31\1\32\1\10\1\33"+
    "\1\16\1\34\1\35\1\36\5\10\1\37\1\40\1\41"+
    "\1\10\1\42\1\43\1\44\3\10\1\45\1\10\1\46"+
    "\2\10\1\47\2\10\1\50\1\51\5\10\1\52\1\10"+
    "\1\53\1\10\1\54\1\10\111\0\1\55\1\10\3\0"+
    "\1\10\15\0\11\10\1\0\1\10\3\0\7\10\2\0"+
    "\2\10\1\0\5\10\1\0\10\10\1\0\5\10\1\0"+
    "\1\10\1\0\1\10\1\0\1\10\1\0\1\56\1\4"+
    "\3\0\1\56\1\57\14\0\11\56\1\0\1\56\3\0"+
    "\7\56\2\0\2\56\1\0\5\56\1\0\10\56\1\0"+
    "\5\56\1\0\1\56\1\0\1\56\1\0\1\56\2\0"+
    "\1\4\1\60\15\0\1\61\30\0\1\62\37\0\1\63"+
    "\1\0\1\64\2\63\15\0\11\63\1\0\1\63\3\0"+
    "\7\63\2\0\2\63\1\0\5\63\1\0\10\63\1\0"+
    "\5\63\1\0\1\63\1\0\1\63\1\0\1\63\1\0"+
    "\2\10\3\0\1\10\15\0\11\10\1\0\1\10\3\0"+
    "\7\10\2\0\2\10\1\0\5\10\1\0\10\10\1\0"+
    "\5\10\1\0\1\10\1\0\1\10\1\0\1\10\21\0"+
    "\1\65\76\0\1\66\1\67\7\0\1\70\77\0\1\71"+
    "\7\0\1\72\70\0\1\73\3\0\1\73\15\0\11\73"+
    "\1\0\1\73\3\0\7\73\2\0\2\73\1\0\5\73"+
    "\1\0\10\73\1\0\5\73\1\0\1\73\1\0\1\73"+
    "\1\0\1\73\1\0\1\74\4\0\1\74\15\0\11\74"+
    "\1\0\1\74\3\0\7\74\2\0\2\74\1\75\5\74"+
    "\1\0\10\74\1\0\5\74\1\0\1\74\1\0\1\74"+
    "\1\0\1\74\21\0\1\76\30\0\1\77\56\0\1\100"+
    "\70\0\1\4\16\0\1\101\1\0\1\102\65\0\2\10"+
    "\3\0\1\10\15\0\1\10\1\103\7\10\1\0\1\10"+
    "\3\0\1\104\1\105\5\10\2\0\2\10\1\0\5\10"+
    "\1\0\1\106\2\10\1\107\1\110\3\10\1\0\5\10"+
    "\1\0\1\10\1\0\1\10\1\0\1\10\1\0\2\10"+
    "\3\0\1\10\15\0\3\10\1\111\1\112\4\10\1\0"+
    "\1\10\3\0\1\113\6\10\2\0\2\10\1\0\1\10"+
    "\1\114\3\10\1\0\10\10\1\0\5\10\1\0\1\10"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\3\0\1\10"+
    "\15\0\10\10\1\115\1\0\1\10\3\0\7\10\2\0"+
    "\2\10\1\0\5\10\1\0\10\10\1\0\5\10\1\0"+
    "\1\10\1\0\1\10\1\0\1\10\1\0\2\10\3\0"+
    "\1\10\15\0\5\10\1\116\1\117\1\10\1\120\1\0"+
    "\1\10\3\0\1\10\1\121\5\10\2\0\2\10\1\0"+
    "\5\10\1\0\10\10\1\0\5\10\1\0\1\10\1\0"+
    "\1\10\1\0\1\10\1\0\2\10\3\0\1\10\15\0"+
    "\10\10\1\122\1\0\1\10\3\0\7\10\2\0\2\10"+
    "\1\0\5\10\1\0\10\10\1\0\5\10\1\0\1\10"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\3\0\1\10"+
    "\15\0\7\10\1\123\1\10\1\0\1\10\3\0\7\10"+
    "\2\0\2\10\1\0\5\10\1\0\10\10\1\0\5\10"+
    "\1\0\1\10\1\0\1\10\1\0\1\10\1\0\2\10"+
    "\3\0\1\10\15\0\1\124\10\10\1\0\1\10\3\0"+
    "\7\10\2\0\2\10\1\0\5\10\1\0\10\10\1\0"+
    "\5\10\1\0\1\10\1\0\1\10\1\0\1\10\21\0"+
    "\1\125\13\0\1\126\101\0\1\127\1\130\1\131\2\0"+
    "\1\132\16\0\1\133\2\0\1\134\1\135\51\0\1\136"+
    "\17\0\1\137\47\0\2\10\3\0\1\10\15\0\11\10"+
    "\1\0\1\10\3\0\7\10\2\0\1\140\1\10\1\0"+
    "\5\10\1\0\10\10\1\0\5\10\1\0\1\10\1\0"+
    "\1\10\1\0\1\10\1\0\2\10\3\0\1\10\15\0"+
    "\1\141\3\10\1\142\4\10\1\0\1\10\3\0\7\10"+
    "\2\0\2\10\1\0\5\10\1\0\10\10\1\0\5\10"+
    "\1\0\1\10\1\0\1\10\1\0\1\10\52\0\1\143"+
    "\56\0\1\144\30\0\1\145\36\0\2\10\3\0\1\10"+
    "\15\0\6\10\1\146\2\10\1\0\1\10\3\0\1\10"+
    "\1\147\5\10\2\0\2\10\1\0\1\10\1\150\3\10"+
    "\1\0\1\151\7\10\1\0\5\10\1\0\1\10\1\0"+
    "\1\10\1\0\1\10\51\0\1\152\37\0\2\10\3\0"+
    "\1\10\15\0\1\153\2\10\1\154\5\10\1\0\1\10"+
    "\3\0\7\10\2\0\1\155\1\10\1\0\5\10\1\0"+
    "\10\10\1\0\5\10\1\0\1\10\1\0\1\10\1\0"+
    "\1\10\1\0\2\10\3\0\1\10\15\0\3\10\1\156"+
    "\5\10\1\0\1\10\3\0\7\10\2\0\1\157\1\160"+
    "\1\0\5\10\1\0\10\10\1\0\5\10\1\0\1\10"+
    "\1\0\1\10\1\0\1\10\63\0\1\161\25\0\2\10"+
    "\3\0\1\10\15\0\10\10\1\162\1\0\1\10\3\0"+
    "\7\10\2\0\1\10\1\163\1\0\5\10\1\0\10\10"+
    "\1\0\5\10\1\0\1\10\1\0\1\10\1\0\1\10"+
    "\1\0\2\10\3\0\1\10\15\0\3\10\1\164\5\10"+
    "\1\0\1\10\3\0\7\10\2\0\2\10\1\0\5\10"+
    "\1\0\10\10\1\0\5\10\1\0\1\10\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\3\0\1\10\15\0\3\10"+
    "\1\165\5\10\1\0\1\10\3\0\1\166\6\10\2\0"+
    "\2\10\1\0\5\10\1\0\10\10\1\0\5\10\1\0"+
    "\1\10\1\0\1\10\1\0\1\10\21\0\1\167\27\0"+
    "\1\170\1\171\21\0\1\172\5\0\1\173\26\0\1\174"+
    "\67\0\2\10\3\0\1\10\15\0\11\10\1\0\1\10"+
    "\3\0\3\10\1\175\1\176\2\10\2\0\2\10\1\0"+
    "\2\10\1\177\2\10\1\0\5\10\1\200\2\10\1\0"+
    "\1\201\1\202\3\10\1\0\1\10\1\0\1\10\1\0"+
    "\1\10\2\0\1\56\106\0\1\203\1\204\3\0\1\203"+
    "\1\205\14\0\11\203\1\0\1\203\3\0\7\203\2\0"+
    "\2\203\1\0\5\203\1\0\10\203\1\0\5\203\1\0"+
    "\1\203\1\0\1\203\1\0\1\203\12\66\2\0\74\66"+
    "\11\67\1\206\2\0\74\67\21\0\1\207\102\0\1\210"+
    "\74\0\1\74\1\211\3\0\1\74\15\0\11\74\1\0"+
    "\1\74\3\0\7\74\2\0\2\74\1\0\5\74\1\0"+
    "\10\74\1\0\5\74\1\0\1\74\1\0\1\74\1\0"+
    "\1\74\21\0\1\212\107\0\1\213\67\0\2\10\3\0"+
    "\1\10\15\0\2\10\1\214\6\10\1\0\1\10\3\0"+
    "\7\10\2\0\2\10\1\0\5\10\1\0\10\10\1\0"+
    "\5\10\1\0\1\10\1\0\1\10\1\0\1\10\1\0"+
    "\2\10\3\0\1\10\15\0\6\10\1\215\2\10\1\0"+
    "\1\10\3\0\7\10\2\0\2\10\1\0\5\10\1\0"+
    "\10\10\1\0\5\10\1\0\1\10\1\0\1\10\1\0"+
    "\1\10\1\0\2\10\3\0\1\10\15\0\11\10\1\0"+
    "\1\10\3\0\7\10\2\0\2\10\1\0\1\216\4\10"+
    "\1\0\10\10\1\0\5\10\1\0\1\10\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\3\0\1\10\15\0\11\10"+
    "\1\0\1\10\3\0\7\10\2\0\2\10\1\0\5\10"+
    "\1\0\1\10\1\217\6\10\1\0\5\10\1\0\1\10"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\3\0\1\10"+
    "\15\0\4\10\1\220\4\10\1\0\1\10\3\0\7\10"+
    "\2\0\2\10\1\0\5\10\1\0\10\10\1\0\5\10"+
    "\1\0\1\10\1\0\1\10\1\0\1\10\1\0\2\10"+
    "\3\0\1\10\15\0\7\10\1\221\1\10\1\0\1\10"+
    "\3\0\7\10\2\0\1\222\1\10\1\0\5\10\1\0"+
    "\10\10\1\0\5\10\1\0\1\10\1\0\1\10\1\0"+
    "\1\10\1\0\2\10\3\0\1\10\15\0\11\10\1\0"+
    "\1\10\3\0\1\10\1\223\5\10\2\0\2\10\1\0"+
    "\5\10\1\0\10\10\1\0\5\10\1\0\1\10\1\0"+
    "\1\10\1\0\1\10\1\0\2\10\3\0\1\10\15\0"+
    "\6\10\1\224\1\225\1\10\1\0\1\10\3\0\1\226"+
    "\6\10\2\0\2\10\1\0\5\10\1\0\10\10\1\0"+
    "\5\10\1\0\1\10\1\0\1\10\1\0\1\10\1\0"+
    "\2\10\3\0\1\10\15\0\3\10\1\227\1\230\4\10"+
    "\1\0\1\10\3\0\7\10\2\0\2\10\1\0\5\10"+
    "\1\0\10\10\1\0\5\10\1\0\1\10\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\3\0\1\10\15\0\11\10"+
    "\1\0\1\10\3\0\7\10\2\0\1\10\1\231\1\0"+
    "\5\10\1\0\10\10\1\0\5\10\1\0\1\10\1\0"+
    "\1\10\1\0\1\10\1\0\2\10\3\0\1\10\15\0"+
    "\6\10\1\232\2\10\1\0\1\10\3\0\7\10\2\0"+
    "\2\10\1\0\5\10\1\0\10\10\1\0\5\10\1\0"+
    "\1\10\1\0\1\10\1\0\1\10\1\0\2\10\3\0"+
    "\1\10\15\0\10\10\1\233\1\0\1\10\3\0\7\10"+
    "\2\0\2\10\1\0\5\10\1\0\10\10\1\0\5\10"+
    "\1\0\1\10\1\0\1\10\1\0\1\10\1\0\2\10"+
    "\3\0\1\10\15\0\11\10\1\0\1\10\3\0\7\10"+
    "\2\0\2\10\1\0\1\234\4\10\1\0\10\10\1\0"+
    "\5\10\1\0\1\10\1\0\1\10\1\0\1\10\1\0"+
    "\2\10\3\0\1\10\15\0\1\235\10\10\1\0\1\10"+
    "\3\0\7\10\2\0\2\10\1\0\5\10\1\0\10\10"+
    "\1\0\5\10\1\0\1\10\1\0\1\10\1\0\1\10"+
    "\1\0\2\10\3\0\1\10\15\0\4\10\1\236\4\10"+
    "\1\0\1\10\3\0\7\10\2\0\2\10\1\0\5\10"+
    "\1\0\10\10\1\0\5\10\1\0\1\10\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\3\0\1\10\15\0\7\10"+
    "\1\237\1\10\1\0\1\10\3\0\7\10\2\0\2\10"+
    "\1\0\5\10\1\0\10\10\1\0\5\10\1\0\1\10"+
    "\1\0\1\10\1\0\1\240\31\0\1\241\112\0\1\242"+
    "\102\0\1\243\104\0\1\244\126\0\1\245\73\0\1\246"+
    "\122\0\1\247\46\0\2\10\3\0\1\10\15\0\6\10"+
    "\1\250\2\10\1\0\1\10\3\0\7\10\2\0\2\10"+
    "\1\0\5\10\1\0\10\10\1\0\5\10\1\0\1\10"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\3\0\1\10"+
    "\15\0\11\10\1\0\1\10\3\0\7\10\2\0\2\10"+
    "\1\0\5\10\1\0\2\10\1\251\5\10\1\0\5\10"+
    "\1\0\1\10\1\0\1\10\1\0\1\10\1\0\2\10"+
    "\3\0\1\10\15\0\11\10\1\0\1\10\3\0\7\10"+
    "\2\0\2\10\1\0\5\10\1\0\1\252\7\10\1\0"+
    "\5\10\1\0\1\10\1\0\1\10\1\0\1\10\21\0"+
    "\1\253\67\0\2\10\3\0\1\10\15\0\6\10\1\254"+
    "\2\10\1\0\1\10\3\0\7\10\2\0\2\10\1\0"+
    "\5\10\1\0\10\10\1\0\5\10\1\0\1\10\1\0"+
    "\1\10\1\0\1\10\1\0\2\10\3\0\1\10\15\0"+
    "\1\10\1\255\4\10\1\256\1\257\1\10\1\0\1\10"+
    "\3\0\7\10\2\0\2\10\1\0\5\10\1\0\10\10"+
    "\1\0\5\10\1\0\1\10\1\0\1\10\1\0\1\10"+
    "\1\0\2\10\3\0\1\10\15\0\11\10\1\0\1\10"+
    "\3\0\7\10\2\0\2\10\1\0\5\10\1\0\1\10"+
    "\1\260\6\10\1\0\5\10\1\0\1\10\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\3\0\1\10\15\0\1\10"+
    "\1\261\7\10\1\0\1\10\3\0\7\10\2\0\2\10"+
    "\1\0\1\10\1\262\3\10\1\0\10\10\1\0\5\10"+
    "\1\0\1\10\1\0\1\10\1\0\1\10\1\0\2\10"+
    "\3\0\1\10\15\0\1\263\10\10\1\0\1\10\3\0"+
    "\7\10\2\0\2\10\1\0\5\10\1\0\10\10\1\0"+
    "\5\10\1\0\1\10\1\0\1\10\1\0\1\10\1\0"+
    "\2\10\3\0\1\10\15\0\10\10\1\264\1\0\1\10"+
    "\3\0\7\10\2\0\2\10\1\0\5\10\1\0\10\10"+
    "\1\0\5\10\1\0\1\10\1\0\1\10\1\0\1\10"+
    "\1\0\2\10\3\0\1\10\15\0\11\10\1\0\1\10"+
    "\3\0\1\10\1\265\5\10\2\0\2\10\1\0\5\10"+
    "\1\0\10\10\1\0\5\10\1\0\1\10\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\3\0\1\10\15\0\11\10"+
    "\1\0\1\10\3\0\1\10\1\266\5\10\2\0\2\10"+
    "\1\0\5\10\1\0\10\10\1\0\5\10\1\0\1\10"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\3\0\1\10"+
    "\15\0\3\10\1\267\5\10\1\0\1\10\3\0\7\10"+
    "\2\0\1\270\1\10\1\0\5\10\1\0\10\10\1\0"+
    "\5\10\1\0\1\10\1\0\1\10\1\0\1\10\1\0"+
    "\2\10\3\0\1\10\15\0\5\10\1\271\3\10\1\0"+
    "\1\10\3\0\7\10\2\0\2\10\1\0\5\10\1\0"+
    "\10\10\1\0\5\10\1\0\1\10\1\0\1\10\1\0"+
    "\1\10\1\0\2\10\3\0\1\10\15\0\10\10\1\272"+
    "\1\0\1\10\3\0\7\10\2\0\2\10\1\0\5\10"+
    "\1\0\10\10\1\0\5\10\1\0\1\10\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\3\0\1\10\15\0\7\10"+
    "\1\273\1\10\1\0\1\10\3\0\7\10\2\0\2\10"+
    "\1\0\5\10\1\0\10\10\1\0\5\10\1\0\1\10"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\3\0\1\10"+
    "\15\0\3\10\1\274\5\10\1\0\1\10\3\0\7\10"+
    "\2\0\2\10\1\0\5\10\1\0\10\10\1\0\5\10"+
    "\1\0\1\10\1\0\1\10\1\0\1\10\21\0\1\275"+
    "\43\0\1\276\43\0\1\277\52\0\1\300\34\0\1\275"+
    "\67\0\2\10\3\0\1\10\15\0\11\10\1\0\1\10"+
    "\3\0\4\10\1\301\2\10\2\0\2\10\1\0\5\10"+
    "\1\0\10\10\1\0\5\10\1\0\1\10\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\3\0\1\10\15\0\11\10"+
    "\1\0\1\10\3\0\7\10\2\0\2\10\1\0\3\10"+
    "\1\302\1\10\1\0\10\10\1\0\5\10\1\0\1\10"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\3\0\1\10"+
    "\15\0\11\10\1\0\1\10\3\0\7\10\2\0\2\10"+
    "\1\0\3\10\1\303\1\10\1\0\10\10\1\0\5\10"+
    "\1\0\1\10\1\0\1\10\1\0\1\10\1\0\2\10"+
    "\3\0\1\10\15\0\11\10\1\0\1\10\3\0\7\10"+
    "\2\0\2\10\1\0\3\10\1\304\1\10\1\0\10\10"+
    "\1\0\5\10\1\0\1\10\1\0\1\10\1\0\1\10"+
    "\1\0\2\10\3\0\1\10\15\0\11\10\1\0\1\10"+
    "\3\0\5\10\1\305\1\10\2\0\2\10\1\0\5\10"+
    "\1\0\10\10\1\0\5\10\1\0\1\10\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\3\0\1\10\15\0\11\10"+
    "\1\0\1\10\3\0\7\10\2\0\2\10\1\0\5\10"+
    "\1\0\6\10\1\306\1\10\1\0\5\10\1\0\1\10"+
    "\1\0\1\10\1\0\1\10\1\0\2\203\3\0\1\203"+
    "\15\0\11\203\1\0\1\203\3\0\7\203\2\0\2\203"+
    "\1\0\5\203\1\0\10\203\1\0\5\203\1\0\1\203"+
    "\1\0\1\203\1\0\1\203\1\0\1\203\1\204\3\0"+
    "\1\203\15\0\11\203\1\0\1\203\3\0\7\203\2\0"+
    "\2\203\1\0\5\203\1\0\10\203\1\0\5\203\1\0"+
    "\1\203\1\0\1\203\1\0\1\203\1\0\2\203\3\0"+
    "\1\203\1\205\14\0\11\203\1\0\1\203\3\0\7\203"+
    "\2\0\2\203\1\0\5\203\1\0\10\203\1\0\5\203"+
    "\1\0\1\203\1\0\1\203\1\0\1\203\10\67\1\307"+
    "\1\206\2\0\74\67\2\0\1\211\106\0\2\10\3\0"+
    "\1\10\15\0\3\10\1\310\5\10\1\0\1\10\3\0"+
    "\7\10\2\0\2\10\1\0\5\10\1\0\10\10\1\0"+
    "\5\10\1\0\1\10\1\0\1\10\1\0\1\10\1\0"+
    "\2\10\3\0\1\10\15\0\1\311\10\10\1\0\1\10"+
    "\3\0\7\10\2\0\2\10\1\0\5\10\1\0\10\10"+
    "\1\0\5\10\1\0\1\10\1\0\1\10\1\0\1\10"+
    "\1\0\2\10\3\0\1\10\15\0\6\10\1\312\2\10"+
    "\1\0\1\10\3\0\7\10\2\0\1\313\1\10\1\0"+
    "\1\314\1\315\3\10\1\0\2\10\1\316\5\10\1\0"+
    "\5\10\1\0\1\10\1\0\1\10\1\0\1\10\1\0"+
    "\2\10\3\0\1\10\15\0\7\10\1\317\1\10\1\0"+
    "\1\10\3\0\7\10\2\0\2\10\1\0\5\10\1\0"+
    "\10\10\1\0\5\10\1\0\1\10\1\0\1\10\1\0"+
    "\1\10\1\0\2\10\3\0\1\10\15\0\11\10\1\0"+
    "\1\10\3\0\1\320\6\10\2\0\2\10\1\0\5\10"+
    "\1\0\10\10\1\0\5\10\1\0\1\10\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\3\0\1\10\15\0\1\321"+
    "\10\10\1\0\1\10\3\0\7\10\2\0\2\10\1\0"+
    "\5\10\1\0\10\10\1\0\5\10\1\0\1\10\1\0"+
    "\1\10\1\0\1\10\1\0\2\10\3\0\1\10\15\0"+
    "\7\10\1\263\1\10\1\0\1\10\3\0\7\10\2\0"+
    "\2\10\1\0\5\10\1\0\10\10\1\0\5\10\1\0"+
    "\1\10\1\0\1\10\1\0\1\10\1\0\2\10\3\0"+
    "\1\10\15\0\6\10\1\322\1\323\1\10\1\0\1\10"+
    "\3\0\7\10\2\0\2\10\1\0\5\10\1\0\10\10"+
    "\1\0\5\10\1\0\1\10\1\0\1\10\1\0\1\10"+
    "\1\0\2\10\3\0\1\10\15\0\1\324\10\10\1\0"+
    "\1\10\3\0\7\10\2\0\2\10\1\0\5\10\1\0"+
    "\10\10\1\0\5\10\1\0\1\10\1\0\1\10\1\0"+
    "\1\10\1\0\2\10\3\0\1\10\15\0\1\10\1\325"+
    "\7\10\1\0\1\10\3\0\7\10\2\0\2\10\1\0"+
    "\5\10\1\0\10\10\1\0\5\10\1\0\1\10\1\0"+
    "\1\10\1\0\1\10\1\0\2\10\3\0\1\10\15\0"+
    "\11\10\1\0\1\10\3\0\1\326\6\10\2\0\2\10"+
    "\1\0\5\10\1\0\10\10\1\0\5\10\1\0\1\10"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\3\0\1\10"+
    "\15\0\11\10\1\0\1\10\3\0\1\10\1\327\5\10"+
    "\2\0\2\10\1\0\5\10\1\0\10\10\1\0\5\10"+
    "\1\0\1\10\1\0\1\10\1\0\1\10\1\0\2\10"+
    "\3\0\1\10\15\0\6\10\1\330\2\10\1\0\1\10"+
    "\3\0\7\10\2\0\2\10\1\0\5\10\1\0\10\10"+
    "\1\0\5\10\1\0\1\10\1\0\1\10\1\0\1\10"+
    "\1\0\2\10\3\0\1\10\15\0\11\10\1\0\1\10"+
    "\3\0\1\10\1\331\5\10\2\0\2\10\1\0\5\10"+
    "\1\0\10\10\1\0\5\10\1\0\1\10\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\3\0\1\10\15\0\7\10"+
    "\1\332\1\10\1\0\1\10\3\0\7\10\2\0\2\10"+
    "\1\0\5\10\1\0\10\10\1\0\5\10\1\0\1\10"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\3\0\1\10"+
    "\15\0\4\10\1\333\4\10\1\0\1\10\3\0\7\10"+
    "\2\0\2\10\1\0\5\10\1\0\10\10\1\0\5\10"+
    "\1\0\1\10\1\0\1\10\1\0\1\10\1\0\2\10"+
    "\3\0\1\10\15\0\4\10\1\334\4\10\1\0\1\10"+
    "\3\0\7\10\2\0\2\10\1\0\5\10\1\0\10\10"+
    "\1\0\5\10\1\0\1\10\1\0\1\10\1\0\1\10"+
    "\1\0\2\10\3\0\1\10\15\0\7\10\1\335\1\10"+
    "\1\0\1\10\3\0\7\10\2\0\2\10\1\0\5\10"+
    "\1\0\10\10\1\0\5\10\1\0\1\10\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\3\0\1\10\15\0\11\10"+
    "\1\0\1\10\3\0\7\10\2\0\1\10\1\336\1\0"+
    "\5\10\1\0\10\10\1\0\5\10\1\0\1\10\1\0"+
    "\1\10\1\0\1\10\1\0\2\10\3\0\1\10\15\0"+
    "\11\10\1\0\1\10\3\0\7\10\2\0\1\10\1\337"+
    "\1\0\5\10\1\0\10\10\1\0\5\10\1\0\1\10"+
    "\1\0\1\10\1\0\1\10\105\0\1\340\36\0\1\341"+
    "\102\0\1\342\110\0\1\343\112\0\1\344\130\0\1\345"+
    "\62\0\1\346\61\0\2\10\3\0\1\10\15\0\7\10"+
    "\1\347\1\10\1\0\1\10\3\0\7\10\2\0\2\10"+
    "\1\0\5\10\1\0\10\10\1\0\5\10\1\0\1\10"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\3\0\1\10"+
    "\15\0\1\350\10\10\1\0\1\10\3\0\7\10\2\0"+
    "\2\10\1\0\5\10\1\0\10\10\1\0\5\10\1\0"+
    "\1\10\1\0\1\10\1\0\1\10\1\0\2\10\3\0"+
    "\1\10\15\0\1\351\10\10\1\0\1\10\3\0\7\10"+
    "\2\0\2\10\1\0\5\10\1\0\10\10\1\0\5\10"+
    "\1\0\1\10\1\0\1\10\1\0\1\10\1\0\2\10"+
    "\3\0\1\10\15\0\11\10\1\0\1\10\3\0\1\352"+
    "\6\10\2\0\2\10\1\0\5\10\1\0\10\10\1\0"+
    "\5\10\1\0\1\10\1\0\1\10\1\0\1\10\1\0"+
    "\2\10\3\0\1\10\15\0\7\10\1\353\1\10\1\0"+
    "\1\10\3\0\7\10\2\0\2\10\1\0\5\10\1\0"+
    "\10\10\1\0\5\10\1\0\1\10\1\0\1\10\1\0"+
    "\1\10\1\0\2\10\3\0\1\10\15\0\1\354\10\10"+
    "\1\0\1\10\3\0\7\10\2\0\2\10\1\0\5\10"+
    "\1\0\10\10\1\0\5\10\1\0\1\10\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\3\0\1\10\15\0\11\10"+
    "\1\0\1\10\3\0\1\355\6\10\2\0\2\10\1\0"+
    "\5\10\1\0\10\10\1\0\5\10\1\0\1\10\1\0"+
    "\1\10\1\0\1\10\1\0\2\10\3\0\1\10\15\0"+
    "\11\10\1\0\1\10\3\0\1\356\6\10\2\0\2\10"+
    "\1\0\5\10\1\0\10\10\1\0\5\10\1\0\1\10"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\3\0\1\10"+
    "\15\0\4\10\1\357\4\10\1\0\1\10\3\0\7\10"+
    "\2\0\2\10\1\0\5\10\1\0\10\10\1\0\5\10"+
    "\1\0\1\10\1\0\1\10\1\0\1\10\1\0\2\10"+
    "\3\0\1\10\15\0\1\360\10\10\1\0\1\10\3\0"+
    "\7\10\2\0\2\10\1\0\5\10\1\0\10\10\1\0"+
    "\5\10\1\0\1\10\1\0\1\10\1\0\1\10\1\0"+
    "\2\10\3\0\1\10\15\0\4\10\1\361\4\10\1\0"+
    "\1\10\3\0\7\10\2\0\2\10\1\0\5\10\1\0"+
    "\10\10\1\0\5\10\1\0\1\10\1\0\1\10\1\0"+
    "\1\10\1\0\2\10\3\0\1\10\15\0\1\10\1\362"+
    "\7\10\1\0\1\10\3\0\7\10\2\0\2\10\1\0"+
    "\5\10\1\0\10\10\1\0\5\10\1\0\1\10\1\0"+
    "\1\10\1\0\1\10\1\0\2\10\3\0\1\10\15\0"+
    "\7\10\1\363\1\10\1\0\1\10\3\0\7\10\2\0"+
    "\2\10\1\0\5\10\1\0\10\10\1\0\5\10\1\0"+
    "\1\10\1\0\1\10\1\0\1\10\1\0\2\10\3\0"+
    "\1\10\15\0\11\10\1\0\1\10\3\0\1\10\1\364"+
    "\5\10\2\0\2\10\1\0\5\10\1\0\3\10\1\365"+
    "\4\10\1\0\5\10\1\0\1\10\1\0\1\10\1\0"+
    "\1\10\1\0\2\10\3\0\1\10\15\0\11\10\1\0"+
    "\1\10\3\0\1\366\6\10\2\0\2\10\1\0\5\10"+
    "\1\0\10\10\1\0\5\10\1\0\1\10\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\3\0\1\10\15\0\3\10"+
    "\1\367\5\10\1\0\1\10\3\0\7\10\2\0\2\10"+
    "\1\0\5\10\1\0\10\10\1\0\5\10\1\0\1\10"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\3\0\1\10"+
    "\15\0\5\10\1\370\3\10\1\0\1\10\3\0\7\10"+
    "\2\0\2\10\1\0\5\10\1\0\10\10\1\0\5\10"+
    "\1\0\1\10\1\0\1\10\1\0\1\10\26\0\1\371"+
    "\62\0\2\10\3\0\1\10\15\0\11\10\1\0\1\10"+
    "\3\0\5\10\1\372\1\10\2\0\2\10\1\0\5\10"+
    "\1\0\10\10\1\0\5\10\1\0\1\10\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\3\0\1\10\15\0\11\10"+
    "\1\0\1\10\3\0\7\10\2\0\2\10\1\0\5\10"+
    "\1\0\10\10\1\0\1\373\4\10\1\0\1\10\1\0"+
    "\1\10\1\0\1\10\1\0\2\10\3\0\1\10\15\0"+
    "\11\10\1\0\1\10\3\0\7\10\2\0\2\10\1\0"+
    "\4\10\1\374\1\0\10\10\1\0\5\10\1\0\1\10"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\3\0\1\10"+
    "\15\0\11\10\1\0\1\10\3\0\4\10\1\375\2\10"+
    "\2\0\2\10\1\0\5\10\1\0\10\10\1\0\5\10"+
    "\1\0\1\10\1\0\1\10\1\0\1\10\1\0\2\10"+
    "\3\0\1\10\15\0\11\10\1\0\1\10\3\0\7\10"+
    "\2\0\2\10\1\0\5\10\1\0\10\10\1\0\1\10"+
    "\1\376\3\10\1\0\1\10\1\0\1\10\1\0\1\10"+
    "\1\0\2\10\3\0\1\10\15\0\11\10\1\0\1\10"+
    "\3\0\7\10\2\0\2\10\1\0\5\10\1\0\10\10"+
    "\1\0\2\10\1\377\2\10\1\0\1\10\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\3\0\1\10\15\0\11\10"+
    "\1\0\1\10\3\0\7\10\2\0\1\u0100\1\10\1\0"+
    "\5\10\1\0\10\10\1\0\5\10\1\0\1\10\1\0"+
    "\1\10\1\0\1\10\1\0\2\10\3\0\1\10\15\0"+
    "\11\10\1\0\1\10\3\0\7\10\2\0\2\10\1\0"+
    "\5\10\1\0\2\10\1\u0101\5\10\1\0\5\10\1\0"+
    "\1\10\1\0\1\10\1\0\1\10\1\0\2\10\3\0"+
    "\1\10\15\0\11\10\1\0\1\10\3\0\7\10\2\0"+
    "\2\10\1\0\1\10\1\u0102\3\10\1\0\10\10\1\0"+
    "\5\10\1\0\1\10\1\0\1\10\1\0\1\10\1\0"+
    "\2\10\3\0\1\10\15\0\1\u0103\10\10\1\0\1\10"+
    "\3\0\7\10\2\0\2\10\1\0\5\10\1\0\10\10"+
    "\1\0\5\10\1\0\1\10\1\0\1\10\1\0\1\10"+
    "\1\0\2\10\3\0\1\10\15\0\3\10\1\u0104\5\10"+
    "\1\0\1\10\3\0\7\10\2\0\2\10\1\0\5\10"+
    "\1\0\10\10\1\0\5\10\1\0\1\10\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\3\0\1\10\15\0\2\10"+
    "\1\u0105\6\10\1\0\1\10\3\0\7\10\2\0\2\10"+
    "\1\0\5\10\1\0\10\10\1\0\5\10\1\0\1\10"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\3\0\1\10"+
    "\15\0\11\10\1\0\1\u0106\3\0\7\10\2\0\2\10"+
    "\1\0\5\10\1\0\10\10\1\0\5\10\1\0\1\10"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\3\0\1\10"+
    "\15\0\11\10\1\0\1\10\3\0\1\10\1\u0107\5\10"+
    "\2\0\2\10\1\0\5\10\1\0\10\10\1\0\5\10"+
    "\1\0\1\10\1\0\1\10\1\0\1\10\1\0\2\10"+
    "\3\0\1\10\15\0\7\10\1\u0108\1\10\1\0\1\10"+
    "\3\0\7\10\2\0\2\10\1\0\5\10\1\0\10\10"+
    "\1\0\5\10\1\0\1\10\1\0\1\10\1\0\1\10"+
    "\1\0\2\10\3\0\1\10\15\0\11\10\1\0\1\10"+
    "\3\0\7\10\2\0\1\u0109\1\10\1\0\5\10\1\0"+
    "\10\10\1\0\5\10\1\0\1\10\1\0\1\10\1\0"+
    "\1\10\1\0\2\10\3\0\1\10\15\0\2\10\1\u010a"+
    "\6\10\1\0\1\10\3\0\7\10\2\0\2\10\1\0"+
    "\5\10\1\0\10\10\1\0\5\10\1\0\1\10\1\0"+
    "\1\10\1\0\1\10\1\0\2\10\3\0\1\10\15\0"+
    "\4\10\1\u010b\4\10\1\0\1\10\3\0\7\10\2\0"+
    "\2\10\1\0\5\10\1\0\10\10\1\0\5\10\1\0"+
    "\1\10\1\0\1\10\1\0\1\10\1\0\2\10\3\0"+
    "\1\10\15\0\1\u010c\10\10\1\0\1\10\3\0\7\10"+
    "\2\0\2\10\1\0\5\10\1\0\10\10\1\0\5\10"+
    "\1\0\1\10\1\0\1\10\1\0\1\10\1\0\2\10"+
    "\3\0\1\10\15\0\6\10\1\u010d\2\10\1\0\1\10"+
    "\3\0\7\10\2\0\2\10\1\0\5\10\1\0\10\10"+
    "\1\0\5\10\1\0\1\10\1\0\1\10\1\0\1\10"+
    "\1\0\2\10\3\0\1\10\15\0\1\10\1\u010e\7\10"+
    "\1\0\1\10\3\0\7\10\2\0\2\10\1\0\5\10"+
    "\1\0\10\10\1\0\5\10\1\0\1\10\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\3\0\1\10\15\0\10\10"+
    "\1\u010f\1\0\1\10\3\0\7\10\2\0\2\10\1\0"+
    "\5\10\1\0\10\10\1\0\5\10\1\0\1\10\1\0"+
    "\1\10\1\0\1\10\1\0\2\10\3\0\1\10\15\0"+
    "\11\10\1\0\1\u0110\3\0\7\10\2\0\2\10\1\0"+
    "\5\10\1\0\10\10\1\0\5\10\1\0\1\10\1\0"+
    "\1\10\1\0\1\10\1\0\2\10\3\0\1\10\15\0"+
    "\11\10\1\0\1\10\3\0\2\10\1\u0111\4\10\2\0"+
    "\2\10\1\0\5\10\1\0\10\10\1\0\5\10\1\0"+
    "\1\10\1\0\1\10\1\0\1\10\1\0\2\10\3\0"+
    "\1\10\15\0\11\10\1\0\1\10\3\0\7\10\2\0"+
    "\1\u0112\1\10\1\0\5\10\1\0\10\10\1\0\5\10"+
    "\1\0\1\10\1\0\1\10\1\0\1\10\1\0\2\10"+
    "\3\0\1\10\15\0\10\10\1\u0113\1\0\1\10\3\0"+
    "\7\10\2\0\2\10\1\0\5\10\1\0\10\10\1\0"+
    "\5\10\1\0\1\10\1\0\1\10\1\0\1\10\1\0"+
    "\2\10\3\0\1\10\15\0\11\10\1\0\1\10\3\0"+
    "\7\10\2\0\1\u0114\1\10\1\0\5\10\1\0\10\10"+
    "\1\0\5\10\1\0\1\10\1\0\1\10\1\0\1\10"+
    "\24\0\1\u0115\113\0\1\u0116\121\0\1\u0117\107\0\1\u0118"+
    "\71\0\1\u0119\13\0\1\u011a\100\0\1\u011b\106\0\1\u011c"+
    "\60\0\2\10\3\0\1\10\15\0\6\10\1\u011d\2\10"+
    "\1\0\1\10\3\0\7\10\2\0\2\10\1\0\5\10"+
    "\1\0\10\10\1\0\5\10\1\0\1\10\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\3\0\1\10\15\0\7\10"+
    "\1\u011e\1\10\1\0\1\10\3\0\7\10\2\0\2\10"+
    "\1\0\5\10\1\0\10\10\1\0\5\10\1\0\1\10"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\3\0\1\10"+
    "\15\0\11\10\1\0\1\10\3\0\7\10\2\0\1\10"+
    "\1\u011f\1\0\5\10\1\0\10\10\1\0\5\10\1\0"+
    "\1\10\1\0\1\10\1\0\1\10\1\0\2\10\3\0"+
    "\1\10\15\0\1\u0120\3\10\1\u0121\4\10\1\0\1\10"+
    "\3\0\7\10\2\0\2\10\1\0\5\10\1\0\10\10"+
    "\1\0\5\10\1\0\1\10\1\0\1\10\1\0\1\10"+
    "\1\0\2\10\3\0\1\10\15\0\10\10\1\u0122\1\0"+
    "\1\10\3\0\7\10\2\0\2\10\1\0\5\10\1\0"+
    "\10\10\1\0\5\10\1\0\1\10\1\0\1\10\1\0"+
    "\1\10\1\0\2\10\3\0\1\10\15\0\1\u0123\10\10"+
    "\1\0\1\10\3\0\7\10\2\0\2\10\1\0\5\10"+
    "\1\0\10\10\1\0\5\10\1\0\1\10\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\3\0\1\10\15\0\4\10"+
    "\1\u0124\4\10\1\0\1\10\3\0\7\10\2\0\2\10"+
    "\1\0\5\10\1\0\10\10\1\0\5\10\1\0\1\10"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\3\0\1\10"+
    "\15\0\11\10\1\0\1\10\3\0\7\10\2\0\1\10"+
    "\1\u0125\1\0\5\10\1\0\10\10\1\0\5\10\1\0"+
    "\1\10\1\0\1\10\1\0\1\10\1\0\2\10\3\0"+
    "\1\10\15\0\4\10\1\u0126\4\10\1\0\1\10\3\0"+
    "\7\10\2\0\2\10\1\0\5\10\1\0\10\10\1\0"+
    "\5\10\1\0\1\10\1\0\1\10\1\0\1\10\1\0"+
    "\2\10\3\0\1\10\15\0\11\10\1\0\1\10\3\0"+
    "\1\u0127\6\10\2\0\2\10\1\0\5\10\1\0\10\10"+
    "\1\0\5\10\1\0\1\10\1\0\1\10\1\0\1\10"+
    "\1\0\2\10\3\0\1\10\15\0\7\10\1\u0128\1\10"+
    "\1\0\1\10\3\0\7\10\2\0\2\10\1\0\5\10"+
    "\1\0\10\10\1\0\5\10\1\0\1\10\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\3\0\1\10\15\0\1\u0129"+
    "\10\10\1\0\1\10\3\0\7\10\2\0\2\10\1\0"+
    "\5\10\1\0\10\10\1\0\5\10\1\0\1\10\1\0"+
    "\1\10\1\0\1\10\1\0\2\10\3\0\1\10\15\0"+
    "\7\10\1\u012a\1\10\1\0\1\10\3\0\7\10\2\0"+
    "\2\10\1\0\5\10\1\0\10\10\1\0\5\10\1\0"+
    "\1\10\1\0\1\10\1\0\1\10\1\0\2\10\3\0"+
    "\1\10\15\0\4\10\1\u012b\4\10\1\0\1\10\3\0"+
    "\7\10\2\0\2\10\1\0\5\10\1\0\10\10\1\0"+
    "\5\10\1\0\1\10\1\0\1\10\1\0\1\10\1\0"+
    "\2\10\3\0\1\10\15\0\11\10\1\0\1\10\3\0"+
    "\7\10\2\0\1\u012c\1\10\1\0\5\10\1\0\10\10"+
    "\1\0\5\10\1\0\1\10\1\0\1\10\1\0\1\10"+
    "\1\0\2\10\3\0\1\10\15\0\4\10\1\u012d\4\10"+
    "\1\0\1\10\3\0\7\10\2\0\2\10\1\0\5\10"+
    "\1\0\10\10\1\0\5\10\1\0\1\10\1\0\1\10"+
    "\1\0\1\10\65\0\1\u012e\23\0\2\10\3\0\1\10"+
    "\15\0\11\10\1\0\1\10\3\0\6\10\1\u012f\2\0"+
    "\2\10\1\0\5\10\1\0\10\10\1\0\5\10\1\0"+
    "\1\10\1\0\1\10\1\0\1\10\1\0\2\10\3\0"+
    "\1\10\15\0\11\10\1\0\1\10\3\0\7\10\2\0"+
    "\2\10\1\0\5\10\1\0\6\10\1\u0130\1\10\1\0"+
    "\5\10\1\0\1\10\1\0\1\10\1\0\1\10\1\0"+
    "\1\u0131\1\10\3\0\1\10\15\0\11\10\1\0\1\10"+
    "\3\0\7\10\2\0\2\10\1\0\5\10\1\0\10\10"+
    "\1\0\5\10\1\0\1\10\1\0\1\10\1\0\1\10"+
    "\1\0\2\10\3\0\1\10\15\0\11\10\1\0\1\10"+
    "\3\0\7\10\2\0\2\10\1\0\5\10\1\0\6\10"+
    "\1\u0132\1\10\1\0\5\10\1\0\1\10\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\3\0\1\10\15\0\11\10"+
    "\1\0\1\10\3\0\7\10\2\0\2\10\1\0\5\10"+
    "\1\0\6\10\1\u0133\1\10\1\0\5\10\1\0\1\10"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\3\0\1\10"+
    "\15\0\11\10\1\0\1\10\3\0\7\10\2\0\2\10"+
    "\1\0\5\10\1\0\10\10\1\0\3\10\1\u0134\1\10"+
    "\1\0\1\10\1\0\1\10\1\0\1\10\1\0\2\10"+
    "\3\0\1\10\15\0\11\10\1\0\1\10\3\0\7\10"+
    "\2\0\2\10\1\0\1\10\1\u0135\3\10\1\0\10\10"+
    "\1\0\5\10\1\0\1\10\1\0\1\10\1\0\1\10"+
    "\1\0\2\10\3\0\1\10\15\0\11\10\1\0\1\10"+
    "\3\0\7\10\2\0\1\u0136\1\10\1\0\5\10\1\0"+
    "\10\10\1\0\5\10\1\0\1\10\1\0\1\10\1\0"+
    "\1\10\1\0\2\10\3\0\1\10\15\0\1\10\1\u0137"+
    "\7\10\1\0\1\10\3\0\7\10\2\0\2\10\1\0"+
    "\5\10\1\0\10\10\1\0\5\10\1\0\1\10\1\0"+
    "\1\10\1\0\1\10\1\0\2\10\3\0\1\10\15\0"+
    "\10\10\1\u0138\1\0\1\10\3\0\7\10\2\0\2\10"+
    "\1\0\5\10\1\0\10\10\1\0\5\10\1\0\1\10"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\3\0\1\10"+
    "\15\0\11\10\1\0\1\10\3\0\7\10\2\0\1\u0139"+
    "\1\10\1\0\5\10\1\0\10\10\1\0\5\10\1\0"+
    "\1\10\1\0\1\10\1\0\1\10\1\0\2\10\3\0"+
    "\1\10\15\0\11\10\1\0\1\10\3\0\7\10\2\0"+
    "\2\10\1\0\1\u013a\4\10\1\0\10\10\1\0\5\10"+
    "\1\0\1\10\1\0\1\10\1\0\1\10\1\0\2\10"+
    "\3\0\1\10\15\0\11\10\1\0\1\10\3\0\1\10"+
    "\1\u013b\5\10\2\0\2\10\1\0\5\10\1\0\10\10"+
    "\1\0\5\10\1\0\1\10\1\0\1\10\1\0\1\10"+
    "\1\0\2\10\3\0\1\10\15\0\5\10\1\u013c\3\10"+
    "\1\0\1\10\3\0\7\10\2\0\2\10\1\0\5\10"+
    "\1\0\10\10\1\0\5\10\1\0\1\10\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\3\0\1\10\15\0\7\10"+
    "\1\u013d\1\10\1\0\1\10\3\0\7\10\2\0\2\10"+
    "\1\0\5\10\1\0\10\10\1\0\5\10\1\0\1\10"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\3\0\1\10"+
    "\15\0\4\10\1\u013e\4\10\1\0\1\10\3\0\7\10"+
    "\2\0\2\10\1\0\5\10\1\0\10\10\1\0\5\10"+
    "\1\0\1\10\1\0\1\10\1\0\1\10\1\0\2\10"+
    "\3\0\1\10\15\0\1\10\1\u013f\7\10\1\0\1\10"+
    "\3\0\7\10\2\0\2\10\1\0\5\10\1\0\10\10"+
    "\1\0\5\10\1\0\1\10\1\0\1\10\1\0\1\10"+
    "\1\0\2\10\3\0\1\10\15\0\11\10\1\0\1\10"+
    "\3\0\1\10\1\u0140\5\10\2\0\2\10\1\0\5\10"+
    "\1\0\10\10\1\0\5\10\1\0\1\10\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\3\0\1\10\15\0\10\10"+
    "\1\u0141\1\0\1\10\3\0\7\10\2\0\2\10\1\0"+
    "\5\10\1\0\10\10\1\0\5\10\1\0\1\10\1\0"+
    "\1\10\1\0\1\10\25\0\1\u0142\120\0\1\u0143\75\0"+
    "\1\u0144\13\0\1\u0145\107\0\1\u0146\142\0\1\u0147\56\0"+
    "\1\u0148\100\0\1\u0118\55\0\2\10\3\0\1\10\15\0"+
    "\11\10\1\0\1\10\3\0\7\10\2\0\2\10\1\0"+
    "\5\10\1\0\1\10\1\u0149\6\10\1\0\5\10\1\0"+
    "\1\10\1\0\1\10\1\0\1\10\1\0\2\10\3\0"+
    "\1\10\15\0\11\10\1\0\1\10\3\0\7\10\2\0"+
    "\2\10\1\0\1\u014a\4\10\1\0\10\10\1\0\5\10"+
    "\1\0\1\10\1\0\1\10\1\0\1\10\1\0\2\10"+
    "\3\0\1\10\15\0\4\10\1\u014b\4\10\1\0\1\10"+
    "\3\0\7\10\2\0\2\10\1\0\5\10\1\0\10\10"+
    "\1\0\5\10\1\0\1\10\1\0\1\10\1\0\1\10"+
    "\1\0\2\10\3\0\1\10\15\0\11\10\1\0\1\10"+
    "\3\0\1\10\1\u014c\5\10\2\0\2\10\1\0\5\10"+
    "\1\0\10\10\1\0\5\10\1\0\1\10\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\3\0\1\10\15\0\11\10"+
    "\1\0\1\10\3\0\7\10\2\0\2\10\1\0\1\10"+
    "\1\u014d\3\10\1\0\10\10\1\0\5\10\1\0\1\10"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\3\0\1\10"+
    "\15\0\11\10\1\0\1\10\3\0\7\10\2\0\2\10"+
    "\1\0\5\10\1\0\1\u014e\7\10\1\0\5\10\1\0"+
    "\1\10\1\0\1\10\1\0\1\10\1\0\2\10\3\0"+
    "\1\10\15\0\10\10\1\u014f\1\0\1\10\3\0\7\10"+
    "\2\0\2\10\1\0\5\10\1\0\10\10\1\0\5\10"+
    "\1\0\1\10\1\0\1\10\1\0\1\10\1\0\2\10"+
    "\3\0\1\10\15\0\11\10\1\0\1\10\3\0\1\u0150"+
    "\6\10\2\0\2\10\1\0\5\10\1\0\10\10\1\0"+
    "\5\10\1\0\1\10\1\0\1\10\1\0\1\10\1\0"+
    "\2\10\3\0\1\10\15\0\1\10\1\u0151\7\10\1\0"+
    "\1\10\3\0\7\10\2\0\2\10\1\0\5\10\1\0"+
    "\10\10\1\0\5\10\1\0\1\10\1\0\1\10\1\0"+
    "\1\10\1\0\2\10\3\0\1\10\15\0\11\10\1\0"+
    "\1\10\3\0\1\u0152\6\10\2\0\2\10\1\0\5\10"+
    "\1\0\10\10\1\0\5\10\1\0\1\10\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\3\0\1\10\15\0\11\10"+
    "\1\0\1\10\3\0\7\10\2\0\1\u0153\1\10\1\0"+
    "\5\10\1\0\10\10\1\0\5\10\1\0\1\10\1\0"+
    "\1\10\1\0\1\10\1\0\2\10\3\0\1\10\15\0"+
    "\1\10\1\u0154\7\10\1\0\1\10\3\0\7\10\2\0"+
    "\2\10\1\0\5\10\1\0\10\10\1\0\5\10\1\0"+
    "\1\10\1\0\1\10\1\0\1\10\1\0\2\10\3\0"+
    "\1\10\15\0\7\10\1\u0155\1\10\1\0\1\10\3\0"+
    "\7\10\2\0\2\10\1\0\5\10\1\0\10\10\1\0"+
    "\5\10\1\0\1\10\1\0\1\10\1\0\1\10\1\0"+
    "\2\10\3\0\1\10\15\0\1\10\1\u0156\7\10\1\0"+
    "\1\10\3\0\7\10\2\0\2\10\1\0\5\10\1\0"+
    "\10\10\1\0\5\10\1\0\1\10\1\0\1\10\1\0"+
    "\1\10\1\0\2\10\3\0\1\10\15\0\11\10\1\0"+
    "\1\10\3\0\1\u0157\6\10\2\0\2\10\1\0\5\10"+
    "\1\0\10\10\1\0\5\10\1\0\1\10\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\3\0\1\10\15\0\11\10"+
    "\1\0\1\10\3\0\6\10\1\u0158\2\0\2\10\1\0"+
    "\5\10\1\0\10\10\1\0\5\10\1\0\1\10\1\0"+
    "\1\10\1\0\1\10\1\0\1\u0159\1\10\3\0\1\10"+
    "\15\0\11\10\1\0\1\10\3\0\7\10\2\0\2\10"+
    "\1\0\5\10\1\0\10\10\1\0\5\10\1\0\1\10"+
    "\1\0\1\10\1\0\1\10\1\0\1\u015a\1\10\3\0"+
    "\1\10\15\0\11\10\1\0\1\10\3\0\7\10\2\0"+
    "\2\10\1\0\5\10\1\0\10\10\1\0\5\10\1\0"+
    "\1\10\1\0\1\10\1\0\1\10\1\0\1\u015b\1\10"+
    "\3\0\1\10\15\0\11\10\1\0\1\10\3\0\7\10"+
    "\2\0\2\10\1\0\5\10\1\0\10\10\1\0\5\10"+
    "\1\0\1\10\1\0\1\10\1\0\1\10\1\0\2\10"+
    "\3\0\1\10\15\0\11\10\1\0\1\10\3\0\6\10"+
    "\1\u015c\2\0\2\10\1\0\5\10\1\0\10\10\1\0"+
    "\5\10\1\0\1\10\1\0\1\10\1\0\1\10\1\0"+
    "\2\10\3\0\1\10\15\0\11\10\1\0\1\10\3\0"+
    "\7\10\2\0\2\10\1\0\5\10\1\0\10\10\1\0"+
    "\4\10\1\u015d\1\0\1\10\1\0\1\10\1\0\1\10"+
    "\1\0\2\10\3\0\1\10\15\0\7\10\1\u015e\1\10"+
    "\1\0\1\10\3\0\7\10\2\0\2\10\1\0\5\10"+
    "\1\0\10\10\1\0\5\10\1\0\1\10\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\3\0\1\10\15\0\11\10"+
    "\1\0\1\10\3\0\1\u015f\6\10\2\0\2\10\1\0"+
    "\5\10\1\0\10\10\1\0\5\10\1\0\1\10\1\0"+
    "\1\10\1\0\1\10\1\0\2\10\3\0\1\10\15\0"+
    "\1\u0160\10\10\1\0\1\10\3\0\7\10\2\0\2\10"+
    "\1\0\5\10\1\0\10\10\1\0\5\10\1\0\1\10"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\3\0\1\10"+
    "\15\0\11\10\1\0\1\10\3\0\1\u0161\6\10\2\0"+
    "\2\10\1\0\5\10\1\0\10\10\1\0\5\10\1\0"+
    "\1\10\1\0\1\10\1\0\1\10\1\0\2\10\3\0"+
    "\1\10\15\0\6\10\1\u0162\2\10\1\0\1\10\3\0"+
    "\7\10\2\0\2\10\1\0\5\10\1\0\10\10\1\0"+
    "\5\10\1\0\1\10\1\0\1\10\1\0\1\10\1\0"+
    "\2\10\3\0\1\10\15\0\11\10\1\0\1\10\3\0"+
    "\7\10\2\0\1\10\1\u0163\1\0\5\10\1\0\10\10"+
    "\1\0\5\10\1\0\1\10\1\0\1\10\1\0\1\10"+
    "\1\0\2\10\3\0\1\10\15\0\11\10\1\0\1\10"+
    "\3\0\1\u0164\6\10\2\0\2\10\1\0\5\10\1\0"+
    "\10\10\1\0\5\10\1\0\1\10\1\0\1\10\1\0"+
    "\1\10\1\0\2\10\3\0\1\10\15\0\11\10\1\0"+
    "\1\10\3\0\7\10\2\0\1\u0165\1\10\1\0\5\10"+
    "\1\0\10\10\1\0\5\10\1\0\1\10\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\3\0\1\10\15\0\1\10"+
    "\1\u0166\7\10\1\0\1\10\3\0\7\10\2\0\2\10"+
    "\1\0\5\10\1\0\10\10\1\0\5\10\1\0\1\10"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\3\0\1\10"+
    "\15\0\1\u0167\10\10\1\0\1\10\3\0\7\10\2\0"+
    "\2\10\1\0\5\10\1\0\10\10\1\0\5\10\1\0"+
    "\1\10\1\0\1\10\1\0\1\10\33\0\1\u0168\114\0"+
    "\1\u0169\77\0\1\u016a\103\0\1\u016b\107\0\1\u0118\64\0"+
    "\2\10\3\0\1\10\15\0\4\10\1\u016c\4\10\1\0"+
    "\1\10\3\0\7\10\2\0\2\10\1\0\5\10\1\0"+
    "\10\10\1\0\5\10\1\0\1\10\1\0\1\10\1\0"+
    "\1\10\1\0\2\10\3\0\1\10\15\0\1\u016d\10\10"+
    "\1\0\1\10\3\0\7\10\2\0\2\10\1\0\5\10"+
    "\1\0\10\10\1\0\5\10\1\0\1\10\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\3\0\1\10\15\0\11\10"+
    "\1\0\1\10\3\0\7\10\2\0\2\10\1\0\1\u016e"+
    "\4\10\1\0\10\10\1\0\5\10\1\0\1\10\1\0"+
    "\1\10\1\0\1\10\1\0\2\10\3\0\1\10\15\0"+
    "\1\10\1\u016f\7\10\1\0\1\10\3\0\7\10\2\0"+
    "\2\10\1\0\5\10\1\0\10\10\1\0\5\10\1\0"+
    "\1\10\1\0\1\10\1\0\1\10\1\0\2\10\3\0"+
    "\1\10\15\0\4\10\1\u0170\4\10\1\0\1\10\3\0"+
    "\7\10\2\0\2\10\1\0\5\10\1\0\10\10\1\0"+
    "\5\10\1\0\1\10\1\0\1\10\1\0\1\10\1\0"+
    "\2\10\3\0\1\10\15\0\1\u0171\10\10\1\0\1\10"+
    "\3\0\7\10\2\0\2\10\1\0\5\10\1\0\10\10"+
    "\1\0\5\10\1\0\1\10\1\0\1\10\1\0\1\10"+
    "\1\0\2\10\3\0\1\10\15\0\1\u0172\10\10\1\0"+
    "\1\10\3\0\7\10\2\0\2\10\1\0\5\10\1\0"+
    "\10\10\1\0\5\10\1\0\1\10\1\0\1\10\1\0"+
    "\1\10\1\0\2\10\3\0\1\10\15\0\7\10\1\u0173"+
    "\1\10\1\0\1\10\3\0\7\10\2\0\2\10\1\0"+
    "\5\10\1\0\10\10\1\0\5\10\1\0\1\10\1\0"+
    "\1\10\1\0\1\10\1\0\2\10\3\0\1\10\15\0"+
    "\2\10\1\u0174\6\10\1\0\1\10\3\0\7\10\2\0"+
    "\2\10\1\0\5\10\1\0\10\10\1\0\5\10\1\0"+
    "\1\10\1\0\1\10\1\0\1\10\1\0\2\10\3\0"+
    "\1\10\15\0\11\10\1\0\1\u0175\3\0\7\10\2\0"+
    "\2\10\1\0\5\10\1\0\10\10\1\0\5\10\1\0"+
    "\1\10\1\0\1\10\1\0\1\10\1\0\2\10\3\0"+
    "\1\10\15\0\3\10\1\u0176\5\10\1\0\1\10\3\0"+
    "\7\10\2\0\2\10\1\0\5\10\1\0\10\10\1\0"+
    "\5\10\1\0\1\10\1\0\1\10\1\0\1\10\1\0"+
    "\2\10\3\0\1\10\15\0\7\10\1\u0177\1\10\1\0"+
    "\1\10\3\0\7\10\2\0\2\10\1\0\5\10\1\0"+
    "\10\10\1\0\5\10\1\0\1\10\1\0\1\10\1\0"+
    "\1\10\1\0\2\10\3\0\1\10\15\0\1\u0178\10\10"+
    "\1\0\1\10\3\0\7\10\2\0\2\10\1\0\5\10"+
    "\1\0\10\10\1\0\5\10\1\0\1\10\1\0\1\10"+
    "\1\0\1\10\1\0\1\u0179\1\10\3\0\1\10\15\0"+
    "\11\10\1\0\1\10\3\0\7\10\2\0\2\10\1\0"+
    "\5\10\1\0\10\10\1\0\5\10\1\0\1\10\1\0"+
    "\1\10\1\0\1\10\1\0\1\u017a\1\10\3\0\1\10"+
    "\15\0\11\10\1\0\1\10\3\0\7\10\2\0\2\10"+
    "\1\0\5\10\1\0\10\10\1\0\5\10\1\0\1\10"+
    "\1\0\1\10\1\0\1\10\1\0\1\u017b\1\10\3\0"+
    "\1\10\15\0\11\10\1\0\1\10\3\0\7\10\2\0"+
    "\2\10\1\0\5\10\1\0\10\10\1\0\5\10\1\0"+
    "\1\10\1\0\1\10\1\0\1\10\1\0\2\10\3\0"+
    "\1\10\15\0\11\10\1\0\1\10\3\0\7\10\2\0"+
    "\2\10\1\0\5\10\1\0\10\10\1\0\5\10\1\0"+
    "\1\u017c\1\0\1\10\1\0\1\10\1\0\2\10\3\0"+
    "\1\10\15\0\11\10\1\0\1\10\3\0\7\10\2\0"+
    "\2\10\1\0\2\10\1\u017d\2\10\1\0\10\10\1\0"+
    "\5\10\1\0\1\10\1\0\1\10\1\0\1\10\1\0"+
    "\2\10\3\0\1\10\15\0\1\10\1\u017e\7\10\1\0"+
    "\1\10\3\0\7\10\2\0\2\10\1\0\5\10\1\0"+
    "\10\10\1\0\5\10\1\0\1\10\1\0\1\10\1\0"+
    "\1\10\1\0\2\10\3\0\1\10\15\0\4\10\1\u017f"+
    "\4\10\1\0\1\10\3\0\7\10\2\0\2\10\1\0"+
    "\5\10\1\0\10\10\1\0\5\10\1\0\1\10\1\0"+
    "\1\10\1\0\1\10\1\0\2\10\3\0\1\10\15\0"+
    "\4\10\1\u0180\4\10\1\0\1\10\3\0\7\10\2\0"+
    "\2\10\1\0\5\10\1\0\10\10\1\0\5\10\1\0"+
    "\1\10\1\0\1\10\1\0\1\10\1\0\2\10\3\0"+
    "\1\10\15\0\1\u0181\10\10\1\0\1\10\3\0\7\10"+
    "\2\0\2\10\1\0\5\10\1\0\10\10\1\0\5\10"+
    "\1\0\1\10\1\0\1\10\1\0\1\10\1\0\2\10"+
    "\3\0\1\10\15\0\1\u0182\10\10\1\0\1\10\3\0"+
    "\7\10\2\0\2\10\1\0\5\10\1\0\10\10\1\0"+
    "\5\10\1\0\1\10\1\0\1\10\1\0\1\10\1\0"+
    "\2\10\3\0\1\10\15\0\1\u0183\10\10\1\0\1\10"+
    "\3\0\7\10\2\0\2\10\1\0\5\10\1\0\10\10"+
    "\1\0\5\10\1\0\1\10\1\0\1\10\1\0\1\10"+
    "\1\0\2\10\3\0\1\10\15\0\3\10\1\u0184\5\10"+
    "\1\0\1\10\3\0\7\10\2\0\2\10\1\0\5\10"+
    "\1\0\10\10\1\0\5\10\1\0\1\10\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\3\0\1\10\15\0\7\10"+
    "\1\u0185\1\10\1\0\1\10\3\0\7\10\2\0\2\10"+
    "\1\0\5\10\1\0\10\10\1\0\5\10\1\0\1\10"+
    "\1\0\1\10\1\0\1\10\1\0\1\u0186\1\10\3\0"+
    "\1\10\15\0\11\10\1\0\1\10\3\0\7\10\2\0"+
    "\2\10\1\0\5\10\1\0\10\10\1\0\5\10\1\0"+
    "\1\10\1\0\1\10\1\0\1\10\40\0\1\u0187\112\0"+
    "\1\u0188\100\0\1\u0189\54\0\2\10\3\0\1\10\15\0"+
    "\1\10\1\u018a\7\10\1\0\1\10\3\0\7\10\2\0"+
    "\2\10\1\0\5\10\1\0\10\10\1\0\5\10\1\0"+
    "\1\10\1\0\1\10\1\0\1\10\1\0\1\u018b\1\10"+
    "\3\0\1\10\15\0\11\10\1\0\1\10\3\0\7\10"+
    "\2\0\2\10\1\0\5\10\1\0\10\10\1\0\5\10"+
    "\1\0\1\10\1\0\1\10\1\0\1\10\1\0\2\10"+
    "\3\0\1\10\15\0\3\10\1\u018c\5\10\1\0\1\10"+
    "\3\0\7\10\2\0\2\10\1\0\5\10\1\0\10\10"+
    "\1\0\5\10\1\0\1\10\1\0\1\10\1\0\1\10"+
    "\1\0\2\10\3\0\1\10\15\0\1\u018d\10\10\1\0"+
    "\1\10\3\0\7\10\2\0\2\10\1\0\5\10\1\0"+
    "\10\10\1\0\5\10\1\0\1\10\1\0\1\10\1\0"+
    "\1\10\1\0\2\10\3\0\1\10\15\0\1\10\1\u018e"+
    "\7\10\1\0\1\10\3\0\7\10\2\0\2\10\1\0"+
    "\5\10\1\0\10\10\1\0\5\10\1\0\1\10\1\0"+
    "\1\10\1\0\1\10\1\0\2\10\3\0\1\10\15\0"+
    "\11\10\1\0\1\10\3\0\1\10\1\u018f\5\10\2\0"+
    "\2\10\1\0\5\10\1\0\10\10\1\0\5\10\1\0"+
    "\1\10\1\0\1\10\1\0\1\10\1\0\2\10\3\0"+
    "\1\10\15\0\11\10\1\0\1\10\3\0\1\10\1\u0190"+
    "\5\10\2\0\2\10\1\0\5\10\1\0\10\10\1\0"+
    "\5\10\1\0\1\10\1\0\1\10\1\0\1\10\1\0"+
    "\2\10\3\0\1\10\15\0\1\u0191\10\10\1\0\1\10"+
    "\3\0\7\10\2\0\2\10\1\0\5\10\1\0\10\10"+
    "\1\0\5\10\1\0\1\10\1\0\1\10\1\0\1\10"+
    "\1\0\1\u0192\1\10\3\0\1\10\15\0\11\10\1\0"+
    "\1\10\3\0\7\10\2\0\2\10\1\0\5\10\1\0"+
    "\10\10\1\0\5\10\1\0\1\10\1\0\1\10\1\0"+
    "\1\10\1\0\2\10\3\0\1\10\15\0\11\10\1\0"+
    "\1\10\3\0\5\10\1\u0193\1\10\2\0\2\10\1\0"+
    "\5\10\1\0\10\10\1\0\5\10\1\0\1\10\1\0"+
    "\1\10\1\0\1\10\1\0\1\u0194\1\10\3\0\1\10"+
    "\15\0\11\10\1\0\1\10\3\0\7\10\2\0\2\10"+
    "\1\0\5\10\1\0\10\10\1\0\5\10\1\0\1\10"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\3\0\1\10"+
    "\15\0\2\10\1\u0195\6\10\1\0\1\10\3\0\7\10"+
    "\2\0\2\10\1\0\5\10\1\0\10\10\1\0\5\10"+
    "\1\0\1\10\1\0\1\10\1\0\1\10\1\0\2\10"+
    "\3\0\1\10\15\0\10\10\1\u0196\1\0\1\10\3\0"+
    "\7\10\2\0\2\10\1\0\5\10\1\0\10\10\1\0"+
    "\5\10\1\0\1\10\1\0\1\10\1\0\1\10\1\0"+
    "\2\10\3\0\1\10\15\0\1\10\1\u0197\7\10\1\0"+
    "\1\10\3\0\7\10\2\0\2\10\1\0\5\10\1\0"+
    "\10\10\1\0\5\10\1\0\1\10\1\0\1\10\1\0"+
    "\1\10\1\0\2\10\3\0\1\10\15\0\11\10\1\0"+
    "\1\10\3\0\1\10\1\u0198\5\10\2\0\2\10\1\0"+
    "\5\10\1\0\10\10\1\0\5\10\1\0\1\10\1\0"+
    "\1\10\1\0\1\10\1\0\2\10\3\0\1\10\15\0"+
    "\3\10\1\u0199\5\10\1\0\1\10\3\0\7\10\2\0"+
    "\2\10\1\0\5\10\1\0\10\10\1\0\5\10\1\0"+
    "\1\10\1\0\1\10\1\0\1\10\40\0\1\u0145\107\0"+
    "\1\u011a\50\0\2\10\3\0\1\10\15\0\1\u019a\10\10"+
    "\1\0\1\10\3\0\7\10\2\0\2\10\1\0\5\10"+
    "\1\0\10\10\1\0\5\10\1\0\1\10\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\3\0\1\10\15\0\3\10"+
    "\1\u019b\5\10\1\0\1\10\3\0\7\10\2\0\2\10"+
    "\1\0\5\10\1\0\10\10\1\0\5\10\1\0\1\10"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\3\0\1\10"+
    "\15\0\11\10\1\0\1\10\3\0\7\10\2\0\2\10"+
    "\1\0\1\10\1\u019c\3\10\1\0\10\10\1\0\5\10"+
    "\1\0\1\10\1\0\1\10\1\0\1\10\1\0\2\10"+
    "\3\0\1\10\15\0\3\10\1\u019d\5\10\1\0\1\10"+
    "\3\0\7\10\2\0\2\10\1\0\5\10\1\0\10\10"+
    "\1\0\5\10\1\0\1\10\1\0\1\10\1\0\1\10"+
    "\1\0\2\10\3\0\1\10\15\0\1\u019e\10\10\1\0"+
    "\1\10\3\0\7\10\2\0\2\10\1\0\5\10\1\0"+
    "\10\10\1\0\5\10\1\0\1\10\1\0\1\10\1\0"+
    "\1\10\1\0\2\10\3\0\1\10\15\0\7\10\1\u019f"+
    "\1\10\1\0\1\10\3\0\7\10\2\0\2\10\1\0"+
    "\5\10\1\0\10\10\1\0\5\10\1\0\1\10\1\0"+
    "\1\10\1\0\1\10\1\0\2\10\3\0\1\10\15\0"+
    "\11\10\1\0\1\10\3\0\7\10\2\0\2\10\1\0"+
    "\1\u01a0\4\10\1\0\10\10\1\0\5\10\1\0\1\10"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\3\0\1\10"+
    "\15\0\11\10\1\0\1\10\3\0\3\10\1\u01a1\3\10"+
    "\2\0\2\10\1\0\5\10\1\0\10\10\1\0\5\10"+
    "\1\0\1\10\1\0\1\10\1\0\1\10\1\0\1\u01a2"+
    "\1\10\3\0\1\10\15\0\11\10\1\0\1\10\3\0"+
    "\7\10\2\0\2\10\1\0\5\10\1\0\10\10\1\0"+
    "\5\10\1\0\1\10\1\0\1\10\1\0\1\10\1\0"+
    "\2\10\3\0\1\10\15\0\1\u01a3\10\10\1\0\1\10"+
    "\3\0\7\10\2\0\2\10\1\0\5\10\1\0\10\10"+
    "\1\0\5\10\1\0\1\10\1\0\1\10\1\0\1\10"+
    "\1\0\2\10\3\0\1\10\15\0\2\10\1\u01a4\6\10"+
    "\1\0\1\10\3\0\7\10\2\0\2\10\1\0\5\10"+
    "\1\0\10\10\1\0\5\10\1\0\1\10\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\3\0\1\10\15\0\11\10"+
    "\1\0\1\10\3\0\1\10\1\u01a5\5\10\2\0\2\10"+
    "\1\0\5\10\1\0\10\10\1\0\5\10\1\0\1\10"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\3\0\1\10"+
    "\15\0\11\10\1\0\1\10\3\0\1\10\1\u01a6\5\10"+
    "\2\0\2\10\1\0\5\10\1\0\10\10\1\0\5\10"+
    "\1\0\1\10\1\0\1\10\1\0\1\10\1\0\2\10"+
    "\3\0\1\10\15\0\11\10\1\0\1\10\3\0\7\10"+
    "\2\0\2\10\1\0\1\10\1\u01a7\3\10\1\0\10\10"+
    "\1\0\5\10\1\0\1\10\1\0\1\10\1\0\1\10"+
    "\1\0\2\10\3\0\1\10\15\0\6\10\1\u01a8\2\10"+
    "\1\0\1\10\3\0\7\10\2\0\2\10\1\0\5\10"+
    "\1\0\10\10\1\0\5\10\1\0\1\10\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\3\0\1\10\15\0\11\10"+
    "\1\0\1\10\3\0\7\10\2\0\2\10\1\0\5\10"+
    "\1\0\6\10\1\u01a9\1\10\1\0\5\10\1\0\1\10"+
    "\1\0\1\10\1\0\1\10\1\0\2\10\3\0\1\10"+
    "\15\0\1\10\1\u01aa\7\10\1\0\1\10\3\0\7\10"+
    "\2\0\2\10\1\0\5\10\1\0\10\10\1\0\5\10"+
    "\1\0\1\10\1\0\1\10\1\0\1\10\1\0\2\10"+
    "\3\0\1\10\15\0\1\10\1\u01ab\7\10\1\0\1\10"+
    "\3\0\7\10\2\0\2\10\1\0\5\10\1\0\10\10"+
    "\1\0\5\10\1\0\1\10\1\0\1\10\1\0\1\10"+
    "\1\0\1\u01ac\1\10\3\0\1\10\15\0\11\10\1\0"+
    "\1\10\3\0\7\10\2\0\2\10\1\0\5\10\1\0"+
    "\10\10\1\0\5\10\1\0\1\10\1\0\1\10\1\0"+
    "\1\10\1\0\2\10\3\0\1\10\15\0\1\u01ad\10\10"+
    "\1\0\1\10\3\0\7\10\2\0\2\10\1\0\5\10"+
    "\1\0\10\10\1\0\5\10\1\0\1\10\1\0\1\10"+
    "\1\0\1\10\1\0\2\10\3\0\1\10\15\0\1\u01ae"+
    "\10\10\1\0\1\10\3\0\7\10\2\0\2\10\1\0"+
    "\5\10\1\0\10\10\1\0\5\10\1\0\1\10\1\0"+
    "\1\10\1\0\1\10\1\0\1\u01af\1\10\3\0\1\10"+
    "\15\0\11\10\1\0\1\10\3\0\7\10\2\0\2\10"+
    "\1\0\5\10\1\0\10\10\1\0\5\10\1\0\1\10"+
    "\1\0\1\10\1\0\1\10";

  private static int [] zzUnpackTrans() {
    int [] result = new int[23832];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\6\1\2\11\33\1\2\11"+
    "\3\1\3\11\1\0\2\11\1\1\1\0\1\11\1\1"+
    "\1\11\1\0\1\1\1\11\1\1\1\11\1\1\2\11"+
    "\22\1\2\11\7\0\2\11\3\1\2\11\5\1\1\11"+
    "\6\1\1\11\5\1\1\11\1\1\1\11\2\1\1\11"+
    "\11\1\1\0\2\11\1\1\2\11\25\1\7\0\3\1"+
    "\1\11\21\1\1\11\1\0\2\11\37\1\7\0\22\1"+
    "\1\0\33\1\5\0\1\11\2\0\21\1\1\11\23\1"+
    "\3\0\2\11\2\0\37\1\1\0\1\11\2\0\33\1"+
    "\1\11\2\0\46\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[431];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String lexema;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 214) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;           
    int totalRead = 0;
    while (totalRead < requested) {
      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
      if (numRead == -1) {
        break;
      }
      totalRead += numRead;
    }

    if (totalRead > 0) {
      zzEndRead += totalRead;
      if (totalRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      return false;
    }

    // totalRead = 0: End of stream
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { return ERROR;
          }
        case 123: break;
        case 2: 
          { lexema=yytext(); return ID;
          }
        case 124: break;
        case 3: 
          { lexema=yytext(); return ENTERO;
          }
        case 125: break;
        case 4: 
          { lexema=yytext(); return MENOS;
          }
        case 126: break;
        case 5: 
          { /*Ignore*/
          }
        case 127: break;
        case 6: 
          { lexema=yytext(); return SEPARADOR;
          }
        case 128: break;
        case 7: 
          { lexema=yytext(); return DIVISION;
          }
        case 129: break;
        case 8: 
          { lexema=yytext(); return MULTIPLICACION;
          }
        case 130: break;
        case 9: 
          { lexema=yytext(); return CONJUNCION;
          }
        case 131: break;
        case 10: 
          { lexema=yytext(); return ASIGNACION;
          }
        case 132: break;
        case 11: 
          { lexema=yytext(); return MAS;
          }
        case 133: break;
        case 12: 
          { lexema=yytext(); return T_NS_SEPARATOR;
          }
        case 134: break;
        case 13: 
          { lexema=yytext(); return COMA;
          }
        case 135: break;
        case 14: 
          { lexema=yytext(); return MD;
          }
        case 136: break;
        case 15: 
          { lexema=yytext(); return MF;
          }
        case 137: break;
        case 16: 
          { lexema=yytext(); return T_DEC;
          }
        case 138: break;
        case 17: 
          { lexema=yytext(); return T_MINUS_EQUAL;
          }
        case 139: break;
        case 18: 
          { lexema=yytext(); return T_OBJECT_OPERATOR;
          }
        case 140: break;
        case 19: 
          { lexema=yytext(); return CADENA;
          }
        case 141: break;
        case 20: 
          { lexema=yytext(); return T_CONCAT_EQUAL;
          }
        case 142: break;
        case 21: 
          { lexema=yytext(); return T_DIV_EQUAL;
          }
        case 143: break;
        case 22: 
          { lexema=yytext(); return T_POW;
          }
        case 144: break;
        case 23: 
          { lexema=yytext(); return T_MUL_EQUAL;
          }
        case 145: break;
        case 24: 
          { lexema=yytext(); return VARIABLE;
          }
        case 146: break;
        case 25: 
          { lexema=yytext(); return T_DOLLAR_OPEN_CURLY_BRACES;
          }
        case 147: break;
        case 26: 
          { lexema=yytext(); return IGUAL;
          }
        case 148: break;
        case 27: 
          { lexema=yytext(); return T_DOUBLE_ARROW;
          }
        case 149: break;
        case 28: 
          { lexema=yytext(); return DIFERENTE;
          }
        case 150: break;
        case 29: 
          { lexema=yytext(); return T_PLUS_EQUAL;
          }
        case 151: break;
        case 30: 
          { lexema=yytext(); return T_INC;
          }
        case 152: break;
        case 31: 
          { lexema=yytext(); return T_LOGICAL_OR;
          }
        case 153: break;
        case 32: 
          { lexema=yytext(); return T_AS;
          }
        case 154: break;
        case 33: 
          { lexema=yytext(); return T_AND_EQUAL;
          }
        case 155: break;
        case 34: 
          { lexema=yytext(); return T_BOOLEAN_AND;
          }
        case 156: break;
        case 35: 
          { lexema=yytext(); return T_OR_EQUAL;
          }
        case 157: break;
        case 36: 
          { lexema=yytext(); return T_BOOLEAN_OR;
          }
        case 158: break;
        case 37: 
          { lexema=yytext(); return T_CLOSE_TAG;
          }
        case 159: break;
        case 38: 
          { lexema=yytext(); return T_IS_GREATER_OR_EQUAL;
          }
        case 160: break;
        case 39: 
          { lexema=yytext(); return T_SR;
          }
        case 161: break;
        case 40: 
          { lexema=yytext(); return T_IF;
          }
        case 162: break;
        case 41: 
          { lexema=yytext(); return T_CURLY_OPEN;
          }
        case 163: break;
        case 42: 
          { lexema=yytext(); return T_DO;
          }
        case 164: break;
        case 43: 
          { lexema=yytext(); return T_DOUBLE_COLON;
          }
        case 165: break;
        case 44: 
          { lexema=yytext(); return T_IS_SMALLER_OR_EQUAL;
          }
        case 166: break;
        case 45: 
          { lexema=yytext(); return T_OPEN_TAG;
          }
        case 167: break;
        case 46: 
          { lexema=yytext(); return T_IS_NOT_EQUAL;
          }
        case 168: break;
        case 47: 
          { lexema=yytext(); return T_SL;
          }
        case 169: break;
        case 48: 
          { lexema=yytext(); return T_MOD_EQUAL;
          }
        case 170: break;
        case 49: 
          { lexema=yytext(); return FLOAT;
          }
        case 171: break;
        case 50: 
          { lexema=yytext(); return T_POW_EQUAL;
          }
        case 172: break;
        case 51: 
          { lexema=yytext(); return CARACTER;
          }
        case 173: break;
        case 52: 
          { lexema=yytext(); return T_IS_IDENTICAL;
          }
        case 174: break;
        case 53: 
          { lexema=yytext(); return T_IS_NOT_IDENTICAL;
          }
        case 175: break;
        case 54: 
          { lexema=yytext(); return T_LOGICAL_AND;
          }
        case 176: break;
        case 55: 
          { lexema=yytext(); return T_NEW;
          }
        case 177: break;
        case 56: 
          { lexema=yytext(); return T_SR_EQUAL;
          }
        case 178: break;
        case 57: 
          { lexema=yytext(); return T_EXIT;
          }
        case 179: break;
        case 58: 
          { lexema=yytext(); return T_FOR;
          }
        case 180: break;
        case 59: 
          { lexema=yytext(); return T_LOGICAL_XOR;
          }
        case 181: break;
        case 60: 
          { lexema=yytext(); return T_OPEN_TAG_WITH_ECHO;
          }
        case 182: break;
        case 61: 
          { lexema=yytext(); return T_SL_EQUAL;
          }
        case 183: break;
        case 62: 
          { lexema=yytext(); return T_START_HEREDOC;
          }
        case 184: break;
        case 63: 
          { lexema=yytext(); return COMENT_BLOQUE;
          }
        case 185: break;
        case 64: 
          { lexema=yytext(); return T_ECHO;
          }
        case 186: break;
        case 65: 
          { lexema=yytext(); return T_ELSE;
          }
        case 187: break;
        case 66: 
          { lexema=yytext(); return T_EVAL;
          }
        case 188: break;
        case 67: 
          { lexema=yytext(); return T_CASE;
          }
        case 189: break;
        case 68: 
          { lexema=yytext(); return T_LIST;
          }
        case 190: break;
        case 69: 
          { lexema=yytext(); return T_GOTO;
          }
        case 191: break;
        case 70: 
          { lexema=yytext(); return T_ENDIF;
          }
        case 192: break;
        case 71: 
          { lexema=yytext(); return T_EMPTY;
          }
        case 193: break;
        case 72: 
          { lexema=yytext(); return T_CONST;
          }
        case 194: break;
        case 73: 
          { lexema=yytext(); return T_CATCH;
          }
        case 195: break;
        case 74: 
          { lexema=yytext(); return T_CLONE;
          }
        case 196: break;
        case 75: 
          { lexema=yytext(); return T_CLASS;
          }
        case 197: break;
        case 76: 
          { lexema=yytext(); return T_ARRAY;
          }
        case 198: break;
        case 77: 
          { lexema=yytext(); return T_BREAK;
          }
        case 199: break;
        case 78: 
          { lexema=yytext(); return T_INT_CAST;
          }
        case 200: break;
        case 79: 
          { lexema=yytext(); return T_ISSET;
          }
        case 201: break;
        case 80: 
          { lexema=yytext(); return T_FINAL;
          }
        case 202: break;
        case 81: 
          { lexema=yytext(); return T_PRINT;
          }
        case 203: break;
        case 82: 
          { lexema=yytext(); return T_ELSEIF;
          }
        case 204: break;
        case 83: 
          { lexema=yytext(); return T_ENDFOR;
          }
        case 205: break;
        case 84: 
          { lexema=yytext(); return T_STATIC;
          }
        case 206: break;
        case 85: 
          { lexema=yytext(); return T_RETURN;
          }
        case 207: break;
        case 86: 
          { lexema=yytext(); return T_BOOL_CAST;
          }
        case 208: break;
        case 87: 
          { lexema=yytext(); return T_DOUBLE_CAST;
          }
        case 209: break;
        case 88: 
          { lexema=yytext(); return T_PUBLIC;
          }
        case 210: break;
        case 89: 
          { lexema=yytext(); return T_GLOBAL;
          }
        case 211: break;
        case 90: 
          { lexema=yytext(); return T_DIR;
          }
        case 212: break;
        case 91: 
          { lexema=yytext(); return T_EXTENDS;
          }
        case 213: break;
        case 92: 
          { lexema=yytext(); return T_REQUIRE;
          }
        case 214: break;
        case 93: 
          { lexema=yytext(); return T_ARRAY_CAST;
          }
        case 215: break;
        case 94: 
          { lexema=yytext(); return T_INCLUDE;
          }
        case 216: break;
        case 95: 
          { lexema=yytext(); return T_DECLARE;
          }
        case 217: break;
        case 96: 
          { lexema=yytext(); return T_DEFAULT;
          }
        case 218: break;
        case 97: 
          { lexema=yytext(); return T_FOREACH;
          }
        case 219: break;
        case 98: 
          { lexema=yytext(); return T_FINALLY;
          }
        case 220: break;
        case 99: 
          { lexema=yytext(); return T_PRIVATE;
          }
        case 221: break;
        case 100: 
          { lexema=yytext(); return T_LINE;
          }
        case 222: break;
        case 101: 
          { lexema=yytext(); return T_FILE;
          }
        case 223: break;
        case 102: 
          { lexema=yytext(); return T_ENDWHILE;
          }
        case 224: break;
        case 103: 
          { lexema=yytext(); return T_CONTINUE;
          }
        case 225: break;
        case 104: 
          { lexema=yytext(); return T_CALLABLE;
          }
        case 226: break;
        case 105: 
          { lexema=yytext(); return T_ABSTRACT;
          }
        case 227: break;
        case 106: 
          { lexema=yytext(); return T_OBJECT_CAST;
          }
        case 228: break;
        case 107: 
          { lexema=yytext(); return T_FUNCTION;
          }
        case 229: break;
        case 108: 
          { lexema=yytext(); return T_CLASS_C;
          }
        case 230: break;
        case 109: 
          { lexema=yytext(); return T_ENDSWITCH;
          }
        case 231: break;
        case 110: 
          { lexema=yytext(); return T_FUNC_C;
          }
        case 232: break;
        case 111: 
          { lexema=yytext(); return T_NAMESPACE;
          }
        case 233: break;
        case 112: 
          { lexema=yytext(); return T_INSTEADOF;
          }
        case 234: break;
        case 113: 
          { lexema=yytext(); return T_INTERFACE;
          }
        case 235: break;
        case 114: 
          { lexema=yytext(); return T_PROTECTED;
          }
        case 236: break;
        case 115: 
          { lexema=yytext(); return T_METHOD_C;
          }
        case 237: break;
        case 116: 
          { lexema=yytext(); return T_ENDDECLARE;
          }
        case 238: break;
        case 117: 
          { lexema=yytext(); return T_ENDFOREACH;
          }
        case 239: break;
        case 118: 
          { lexema=yytext(); return T_INSTANCEOF;
          }
        case 240: break;
        case 119: 
          { lexema=yytext(); return T_IMPLEMENTS;
          }
        case 241: break;
        case 120: 
          { lexema=yytext(); return T_REQUIRE_ONCE;
          }
        case 242: break;
        case 121: 
          { lexema=yytext(); return T_INCLUDE_ONCE;
          }
        case 243: break;
        case 122: 
          { lexema=yytext(); return T_NS_C;
          }
        case 244: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
