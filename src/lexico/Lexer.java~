/* The following code was generated by JFlex 1.6.0 */

package lexico;
import static lexico.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>C:/Users/Luis/Documents/NetBeansProjects/Lexico/src/lexico/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\11\1\13\1\14\1\14\1\13\22\0\1\5\1\16\1\4"+
    "\1\0\1\10\1\77\1\32\1\0\1\34\1\35\1\20\1\17\1\103"+
    "\1\3\1\7\1\12\12\2\1\60\1\0\1\71\1\15\1\47\1\46"+
    "\1\0\1\44\1\6\1\42\1\55\1\67\1\66\1\6\1\75\1\56"+
    "\2\6\1\43\1\73\1\72\1\76\1\100\1\6\1\57\1\45\1\74"+
    "\6\6\1\0\1\101\2\0\1\1\1\0\1\25\1\26\1\22\1\53"+
    "\1\21\1\54\1\70\1\23\1\50\1\102\1\41\1\37\1\61\1\40"+
    "\1\24\1\62\1\104\1\31\1\27\1\30\1\51\1\64\1\63\1\65"+
    "\1\33\1\6\1\52\1\36\10\0\1\14\u1fa2\0\1\14\1\14\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\3\1\1\2\1\1\1\3\3\1\1\4\1\5"+
    "\1\1\1\6\1\7\30\1\1\10\1\11\2\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\0\1\20\1\21\1\22"+
    "\1\23\1\3\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\12\12\1\34\1\12\1\35\5\12\1\36"+
    "\1\37\7\0\1\40\1\41\3\12\1\42\1\43\1\44"+
    "\2\12\1\45\1\12\1\46\1\12\1\47\4\12\1\50"+
    "\5\12\1\51\1\52\1\53\1\54\1\52\1\55\6\12"+
    "\1\14\1\56\1\14\1\22\1\57\1\60\1\61\20\12"+
    "\1\62\4\12\7\0\1\12\1\63\1\12\1\64\7\12"+
    "\1\65\1\66\5\12\1\67\2\12\1\70\1\0\1\71"+
    "\1\72\6\12\1\73\1\74\6\12\1\75\3\12\1\76"+
    "\13\12\7\0\1\77\17\12\1\100\1\12\1\0\10\12"+
    "\1\101\3\12\1\102\1\12\1\103\1\12\1\104\1\12"+
    "\1\105\1\106\2\12\1\107\1\110\3\12\5\0\1\111"+
    "\2\0\1\12\1\112\10\12\1\113\2\12\1\114\3\12"+
    "\1\52\6\12\1\115\2\12\1\116\6\12\1\117\1\120"+
    "\1\12\3\0\1\121\1\122\2\0\15\12\1\123\1\124"+
    "\2\12\1\125\7\12\1\126\4\12\1\127\1\0\1\130"+
    "\2\0\1\12\1\131\4\12\1\132\1\133\1\134\1\135"+
    "\2\12\1\136\1\12\1\137\1\140\5\12\1\141\1\142"+
    "\1\143\1\12\1\144\1\12\1\145\2\0\6\12\1\146"+
    "\1\12\1\147\2\12\1\150\2\12\1\151\1\12\1\152"+
    "\1\12\1\153\1\12\1\154\1\12\1\155\1\12\1\156"+
    "\1\157\1\160\2\12\1\161\1\162\4\12\1\163\1\164"+
    "\1\165";

  private static int [] zzUnpackAction() {
    int [] result = new int[424];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\u0114\0\u0159\0\105\0\u019e"+
    "\0\u01e3\0\u0228\0\u026d\0\u02b2\0\u02f7\0\u033c\0\u0381\0\u03c6"+
    "\0\u040b\0\u0450\0\u0495\0\u04da\0\u051f\0\u0564\0\u05a9\0\u05ee"+
    "\0\u0633\0\u0678\0\u06bd\0\u0702\0\u0747\0\u078c\0\u07d1\0\u0816"+
    "\0\u085b\0\u08a0\0\u08e5\0\u092a\0\u096f\0\u09b4\0\u09f9\0\105"+
    "\0\105\0\u0a3e\0\u019e\0\317\0\u0a83\0\105\0\105\0\105"+
    "\0\u0159\0\105\0\105\0\u0ac8\0\105\0\u0b0d\0\105\0\u0b52"+
    "\0\105\0\u0b97\0\105\0\105\0\105\0\u0bdc\0\u0c21\0\u0c66"+
    "\0\u0cab\0\u0cf0\0\u0d35\0\u0d7a\0\u0dbf\0\u0e04\0\u0e49\0\u0e8e"+
    "\0\u019e\0\u0ed3\0\u019e\0\u0f18\0\u0f5d\0\u0fa2\0\u0fe7\0\u102c"+
    "\0\105\0\105\0\u1071\0\u10b6\0\u10fb\0\u1140\0\u1185\0\u11ca"+
    "\0\u120f\0\105\0\105\0\u1254\0\u1299\0\u12de\0\105\0\105"+
    "\0\u1323\0\u1368\0\u13ad\0\u019e\0\u13f2\0\105\0\u1437\0\u019e"+
    "\0\u147c\0\u14c1\0\u1506\0\u154b\0\105\0\u1590\0\u15d5\0\u161a"+
    "\0\u165f\0\u16a4\0\105\0\u16e9\0\105\0\u172e\0\u1773\0\105"+
    "\0\u17b8\0\u17fd\0\u1842\0\u1887\0\u18cc\0\u1911\0\u1956\0\u199b"+
    "\0\u19e0\0\u1a25\0\105\0\105\0\105\0\u1a6a\0\u1aaf\0\u1af4"+
    "\0\u1b39\0\u1b7e\0\u1bc3\0\u1c08\0\u1c4d\0\u1c92\0\u1cd7\0\u1d1c"+
    "\0\u1d61\0\u1da6\0\u1deb\0\u1e30\0\u1e75\0\u019e\0\u1eba\0\u1eff"+
    "\0\u1f44\0\u1f89\0\u1fce\0\u2013\0\u2058\0\u209d\0\u20e2\0\u2127"+
    "\0\u216c\0\u21b1\0\u019e\0\u21f6\0\105\0\u223b\0\u2280\0\u22c5"+
    "\0\u230a\0\u234f\0\u2394\0\u23d9\0\u019e\0\u241e\0\u2463\0\u24a8"+
    "\0\u24ed\0\u2532\0\u2577\0\u019e\0\u25bc\0\u2601\0\105\0\u2646"+
    "\0\105\0\105\0\u268b\0\u26d0\0\u2715\0\u275a\0\u279f\0\u27e4"+
    "\0\u019e\0\u2829\0\u286e\0\u28b3\0\u28f8\0\u293d\0\u2982\0\u29c7"+
    "\0\u019e\0\u2a0c\0\u2a51\0\u2a96\0\u019e\0\u2adb\0\u2b20\0\u2b65"+
    "\0\u2baa\0\u2bef\0\u2c34\0\u2c79\0\u2cbe\0\u2d03\0\u2d48\0\u2d8d"+
    "\0\u2dd2\0\u2e17\0\u2e5c\0\u2ea1\0\u2ee6\0\u2f2b\0\u2f70\0\u019e"+
    "\0\u2fb5\0\u2ffa\0\u303f\0\u3084\0\u30c9\0\u310e\0\u3153\0\u3198"+
    "\0\u31dd\0\u3222\0\u3267\0\u32ac\0\u32f1\0\u3336\0\u337b\0\u019e"+
    "\0\u33c0\0\u3405\0\u344a\0\u348f\0\u34d4\0\u3519\0\u355e\0\u35a3"+
    "\0\u35e8\0\u362d\0\u019e\0\u3672\0\u36b7\0\u36fc\0\u019e\0\u3741"+
    "\0\u019e\0\u3786\0\u019e\0\u37cb\0\u019e\0\u019e\0\u3810\0\u3855"+
    "\0\u019e\0\u019e\0\u389a\0\u38df\0\u3924\0\u3969\0\u39ae\0\u39f3"+
    "\0\u3a38\0\u3a7d\0\105\0\u3ac2\0\u3b07\0\u3b4c\0\u019e\0\u3b91"+
    "\0\u3bd6\0\u3c1b\0\u3c60\0\u3ca5\0\u3cea\0\u3d2f\0\u3d74\0\u3db9"+
    "\0\u3dfe\0\u3e43\0\u019e\0\u3e88\0\u3ecd\0\u3f12\0\105\0\u3f57"+
    "\0\u3f9c\0\u3fe1\0\u4026\0\u406b\0\u40b0\0\u019e\0\u40f5\0\u413a"+
    "\0\u417f\0\u41c4\0\u4209\0\u424e\0\u4293\0\u42d8\0\u431d\0\u019e"+
    "\0\u019e\0\u4362\0\u43a7\0\u43ec\0\u4431\0\105\0\105\0\u4476"+
    "\0\u44bb\0\u4500\0\u4545\0\u458a\0\u45cf\0\u4614\0\u4659\0\u469e"+
    "\0\u46e3\0\u4728\0\u476d\0\u47b2\0\u47f7\0\u483c\0\u019e\0\u019e"+
    "\0\u4881\0\u48c6\0\u019e\0\u490b\0\u4950\0\u4995\0\u49da\0\u4a1f"+
    "\0\u4a64\0\u4aa9\0\u019e\0\u4aee\0\u4b33\0\u4b78\0\u4bbd\0\u4c02"+
    "\0\u4c47\0\105\0\u4c8c\0\u4cd1\0\u4d16\0\u4d5b\0\u4da0\0\u4de5"+
    "\0\u4e2a\0\u4e6f\0\u019e\0\u019e\0\u019e\0\u019e\0\u4eb4\0\u4ef9"+
    "\0\u019e\0\u4f3e\0\u019e\0\u019e\0\u4f83\0\u4fc8\0\u500d\0\u5052"+
    "\0\u5097\0\u019e\0\u019e\0\u019e\0\u50dc\0\u019e\0\u5121\0\105"+
    "\0\u5166\0\u51ab\0\u51f0\0\u5235\0\u527a\0\u52bf\0\u5304\0\u5349"+
    "\0\u019e\0\u538e\0\u019e\0\u53d3\0\u5418\0\u019e\0\u545d\0\u54a2"+
    "\0\u019e\0\u54e7\0\u019e\0\u552c\0\u019e\0\u5571\0\u019e\0\u55b6"+
    "\0\u019e\0\u55fb\0\u019e\0\u019e\0\u019e\0\u5640\0\u5685\0\u019e"+
    "\0\u019e\0\u56ca\0\u570f\0\u5754\0\u5799\0\u019e\0\u019e\0\u019e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[424];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\7\1\13\1\7\1\0\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\10\1\22\1\23\1\24\1\25"+
    "\1\10\1\26\1\27\1\10\1\30\1\2\1\31\1\32"+
    "\1\33\5\10\1\34\1\35\1\36\1\10\1\37\1\40"+
    "\1\41\3\10\1\42\1\10\1\43\2\10\1\44\2\10"+
    "\1\45\1\46\5\10\1\47\1\10\1\50\1\10\1\51"+
    "\1\10\106\0\1\52\1\53\3\0\1\53\12\0\11\53"+
    "\1\0\1\53\3\0\7\53\2\0\2\53\1\0\5\53"+
    "\1\0\10\53\1\0\5\53\1\0\1\53\1\0\1\53"+
    "\1\0\1\53\2\0\1\54\4\0\1\55\77\0\1\54"+
    "\1\56\11\0\1\57\31\0\1\60\37\0\1\61\1\0"+
    "\1\62\2\61\12\0\11\61\1\0\1\61\3\0\7\61"+
    "\2\0\2\61\1\0\5\61\1\0\10\61\1\0\5\61"+
    "\1\0\1\61\1\0\1\61\1\0\1\61\1\0\2\53"+
    "\3\0\1\53\12\0\11\53\1\0\1\53\3\0\7\53"+
    "\2\0\2\53\1\0\5\53\1\0\10\53\1\0\5\53"+
    "\1\0\1\53\1\0\1\53\1\0\1\53\15\0\1\63"+
    "\70\0\1\64\4\0\1\64\12\0\11\64\1\0\1\64"+
    "\3\0\7\64\2\0\2\64\1\65\5\64\1\0\10\64"+
    "\1\0\5\64\1\0\1\64\1\0\1\64\1\0\1\64"+
    "\12\0\1\66\2\0\1\67\104\0\1\70\31\0\1\71"+
    "\52\0\1\72\71\0\1\54\12\0\1\73\1\0\1\74"+
    "\102\0\1\75\2\0\1\76\65\0\2\53\3\0\1\53"+
    "\12\0\1\53\1\77\7\53\1\0\1\53\3\0\1\100"+
    "\1\101\5\53\2\0\2\53\1\0\5\53\1\0\1\102"+
    "\2\53\1\103\1\104\3\53\1\0\5\53\1\0\1\53"+
    "\1\0\1\53\1\0\1\53\1\0\2\53\3\0\1\53"+
    "\12\0\3\53\1\105\1\106\4\53\1\0\1\53\3\0"+
    "\1\107\6\53\2\0\2\53\1\0\1\53\1\110\3\53"+
    "\1\0\10\53\1\0\5\53\1\0\1\53\1\0\1\53"+
    "\1\0\1\53\1\0\2\53\3\0\1\53\12\0\10\53"+
    "\1\111\1\0\1\53\3\0\7\53\2\0\2\53\1\0"+
    "\5\53\1\0\10\53\1\0\5\53\1\0\1\53\1\0"+
    "\1\53\1\0\1\53\1\0\2\53\3\0\1\53\12\0"+
    "\5\53\1\112\1\113\1\53\1\114\1\0\1\53\3\0"+
    "\1\53\1\115\5\53\2\0\2\53\1\0\5\53\1\0"+
    "\10\53\1\0\5\53\1\0\1\53\1\0\1\53\1\0"+
    "\1\53\1\0\2\53\3\0\1\53\12\0\10\53\1\116"+
    "\1\0\1\53\3\0\7\53\2\0\2\53\1\0\5\53"+
    "\1\0\10\53\1\0\5\53\1\0\1\53\1\0\1\53"+
    "\1\0\1\53\1\0\2\53\3\0\1\53\12\0\7\53"+
    "\1\117\1\53\1\0\1\53\3\0\7\53\2\0\2\53"+
    "\1\0\5\53\1\0\10\53\1\0\5\53\1\0\1\53"+
    "\1\0\1\53\1\0\1\53\1\0\2\53\3\0\1\53"+
    "\12\0\1\120\10\53\1\0\1\53\3\0\7\53\2\0"+
    "\2\53\1\0\5\53\1\0\10\53\1\0\5\53\1\0"+
    "\1\53\1\0\1\53\1\0\1\53\15\0\1\121\14\0"+
    "\1\122\76\0\1\123\1\124\1\125\2\0\1\126\16\0"+
    "\1\127\2\0\1\130\1\131\45\0\1\132\20\0\1\133"+
    "\47\0\2\53\3\0\1\53\12\0\11\53\1\0\1\53"+
    "\3\0\7\53\2\0\1\134\1\53\1\0\5\53\1\0"+
    "\10\53\1\0\5\53\1\0\1\53\1\0\1\53\1\0"+
    "\1\53\1\0\2\53\3\0\1\53\12\0\1\135\3\53"+
    "\1\136\4\53\1\0\1\53\3\0\7\53\2\0\2\53"+
    "\1\0\5\53\1\0\10\53\1\0\5\53\1\0\1\53"+
    "\1\0\1\53\1\0\1\53\47\0\1\137\52\0\1\140"+
    "\31\0\1\141\36\0\2\53\3\0\1\53\12\0\6\53"+
    "\1\142\2\53\1\0\1\53\3\0\1\53\1\143\5\53"+
    "\2\0\2\53\1\0\1\53\1\144\3\53\1\0\1\145"+
    "\7\53\1\0\5\53\1\0\1\53\1\0\1\53\1\0"+
    "\1\53\46\0\1\146\37\0\2\53\3\0\1\53\12\0"+
    "\1\147\2\53\1\150\5\53\1\0\1\53\3\0\7\53"+
    "\2\0\1\151\1\53\1\0\5\53\1\0\10\53\1\0"+
    "\5\53\1\0\1\53\1\0\1\53\1\0\1\53\1\0"+
    "\2\53\3\0\1\53\12\0\3\53\1\152\5\53\1\0"+
    "\1\53\3\0\7\53\2\0\1\153\1\154\1\0\5\53"+
    "\1\0\10\53\1\0\5\53\1\0\1\53\1\0\1\53"+
    "\1\0\1\53\60\0\1\155\25\0\2\53\3\0\1\53"+
    "\12\0\10\53\1\156\1\0\1\53\3\0\7\53\2\0"+
    "\1\53\1\157\1\0\5\53\1\0\10\53\1\0\5\53"+
    "\1\0\1\53\1\0\1\53\1\0\1\53\1\0\2\53"+
    "\3\0\1\53\12\0\3\53\1\160\5\53\1\0\1\53"+
    "\3\0\7\53\2\0\2\53\1\0\5\53\1\0\10\53"+
    "\1\0\5\53\1\0\1\53\1\0\1\53\1\0\1\53"+
    "\1\0\2\53\3\0\1\53\12\0\3\53\1\161\5\53"+
    "\1\0\1\53\3\0\1\162\6\53\2\0\2\53\1\0"+
    "\5\53\1\0\10\53\1\0\5\53\1\0\1\53\1\0"+
    "\1\53\1\0\1\53\15\0\1\163\30\0\1\164\1\165"+
    "\21\0\1\166\5\0\1\167\22\0\1\170\70\0\2\53"+
    "\3\0\1\53\12\0\11\53\1\0\1\53\3\0\3\53"+
    "\1\171\1\172\2\53\2\0\2\53\1\0\2\53\1\173"+
    "\2\53\1\0\5\53\1\174\2\53\1\0\1\175\1\176"+
    "\3\53\1\0\1\53\1\0\1\53\1\0\1\53\1\0"+
    "\1\177\1\200\3\0\1\177\1\201\11\0\11\177\1\0"+
    "\1\177\3\0\7\177\2\0\2\177\1\0\5\177\1\0"+
    "\10\177\1\0\5\177\1\0\1\177\1\0\1\177\1\0"+
    "\1\177\1\0\1\64\1\202\3\0\1\64\12\0\11\64"+
    "\1\0\1\64\3\0\7\64\2\0\2\64\1\0\5\64"+
    "\1\0\10\64\1\0\5\64\1\0\1\64\1\0\1\64"+
    "\1\0\1\64\13\66\2\0\70\66\15\0\1\203\104\0"+
    "\1\204\104\0\1\205\70\0\2\53\3\0\1\53\12\0"+
    "\2\53\1\206\6\53\1\0\1\53\3\0\7\53\2\0"+
    "\2\53\1\0\5\53\1\0\10\53\1\0\5\53\1\0"+
    "\1\53\1\0\1\53\1\0\1\53\1\0\2\53\3\0"+
    "\1\53\12\0\6\53\1\207\2\53\1\0\1\53\3\0"+
    "\7\53\2\0\2\53\1\0\5\53\1\0\10\53\1\0"+
    "\5\53\1\0\1\53\1\0\1\53\1\0\1\53\1\0"+
    "\2\53\3\0\1\53\12\0\11\53\1\0\1\53\3\0"+
    "\7\53\2\0\2\53\1\0\1\210\4\53\1\0\10\53"+
    "\1\0\5\53\1\0\1\53\1\0\1\53\1\0\1\53"+
    "\1\0\2\53\3\0\1\53\12\0\11\53\1\0\1\53"+
    "\3\0\7\53\2\0\2\53\1\0\5\53\1\0\1\53"+
    "\1\211\6\53\1\0\5\53\1\0\1\53\1\0\1\53"+
    "\1\0\1\53\1\0\2\53\3\0\1\53\12\0\4\53"+
    "\1\212\4\53\1\0\1\53\3\0\7\53\2\0\2\53"+
    "\1\0\5\53\1\0\10\53\1\0\5\53\1\0\1\53"+
    "\1\0\1\53\1\0\1\53\1\0\2\53\3\0\1\53"+
    "\12\0\7\53\1\213\1\53\1\0\1\53\3\0\7\53"+
    "\2\0\1\214\1\53\1\0\5\53\1\0\10\53\1\0"+
    "\5\53\1\0\1\53\1\0\1\53\1\0\1\53\1\0"+
    "\2\53\3\0\1\53\12\0\11\53\1\0\1\53\3\0"+
    "\1\53\1\215\5\53\2\0\2\53\1\0\5\53\1\0"+
    "\10\53\1\0\5\53\1\0\1\53\1\0\1\53\1\0"+
    "\1\53\1\0\2\53\3\0\1\53\12\0\6\53\1\216"+
    "\1\217\1\53\1\0\1\53\3\0\1\220\6\53\2\0"+
    "\2\53\1\0\5\53\1\0\10\53\1\0\5\53\1\0"+
    "\1\53\1\0\1\53\1\0\1\53\1\0\2\53\3\0"+
    "\1\53\12\0\3\53\1\221\1\222\4\53\1\0\1\53"+
    "\3\0\7\53\2\0\2\53\1\0\5\53\1\0\10\53"+
    "\1\0\5\53\1\0\1\53\1\0\1\53\1\0\1\53"+
    "\1\0\2\53\3\0\1\53\12\0\11\53\1\0\1\53"+
    "\3\0\7\53\2\0\1\53\1\223\1\0\5\53\1\0"+
    "\10\53\1\0\5\53\1\0\1\53\1\0\1\53\1\0"+
    "\1\53\1\0\2\53\3\0\1\53\12\0\6\53\1\224"+
    "\2\53\1\0\1\53\3\0\7\53\2\0\2\53\1\0"+
    "\5\53\1\0\10\53\1\0\5\53\1\0\1\53\1\0"+
    "\1\53\1\0\1\53\1\0\2\53\3\0\1\53\12\0"+
    "\10\53\1\225\1\0\1\53\3\0\7\53\2\0\2\53"+
    "\1\0\5\53\1\0\10\53\1\0\5\53\1\0\1\53"+
    "\1\0\1\53\1\0\1\53\1\0\2\53\3\0\1\53"+
    "\12\0\11\53\1\0\1\53\3\0\7\53\2\0\2\53"+
    "\1\0\1\226\4\53\1\0\10\53\1\0\5\53\1\0"+
    "\1\53\1\0\1\53\1\0\1\53\1\0\2\53\3\0"+
    "\1\53\12\0\1\227\10\53\1\0\1\53\3\0\7\53"+
    "\2\0\2\53\1\0\5\53\1\0\10\53\1\0\5\53"+
    "\1\0\1\53\1\0\1\53\1\0\1\53\1\0\2\53"+
    "\3\0\1\53\12\0\4\53\1\230\4\53\1\0\1\53"+
    "\3\0\7\53\2\0\2\53\1\0\5\53\1\0\10\53"+
    "\1\0\5\53\1\0\1\53\1\0\1\53\1\0\1\53"+
    "\1\0\2\53\3\0\1\53\12\0\7\53\1\231\1\53"+
    "\1\0\1\53\3\0\7\53\2\0\2\53\1\0\5\53"+
    "\1\0\10\53\1\0\5\53\1\0\1\53\1\0\1\53"+
    "\1\0\1\232\26\0\1\233\107\0\1\234\77\0\1\235"+
    "\101\0\1\236\123\0\1\237\70\0\1\240\117\0\1\241"+
    "\46\0\2\53\3\0\1\53\12\0\6\53\1\242\2\53"+
    "\1\0\1\53\3\0\7\53\2\0\2\53\1\0\5\53"+
    "\1\0\10\53\1\0\5\53\1\0\1\53\1\0\1\53"+
    "\1\0\1\53\1\0\2\53\3\0\1\53\12\0\11\53"+
    "\1\0\1\53\3\0\7\53\2\0\2\53\1\0\5\53"+
    "\1\0\2\53\1\243\5\53\1\0\5\53\1\0\1\53"+
    "\1\0\1\53\1\0\1\53\1\0\2\53\3\0\1\53"+
    "\12\0\11\53\1\0\1\53\3\0\7\53\2\0\2\53"+
    "\1\0\5\53\1\0\1\244\7\53\1\0\5\53\1\0"+
    "\1\53\1\0\1\53\1\0\1\53\15\0\1\245\70\0"+
    "\2\53\3\0\1\53\12\0\6\53\1\246\2\53\1\0"+
    "\1\53\3\0\7\53\2\0\2\53\1\0\5\53\1\0"+
    "\10\53\1\0\5\53\1\0\1\53\1\0\1\53\1\0"+
    "\1\53\1\0\2\53\3\0\1\53\12\0\1\53\1\247"+
    "\4\53\1\250\1\251\1\53\1\0\1\53\3\0\7\53"+
    "\2\0\2\53\1\0\5\53\1\0\10\53\1\0\5\53"+
    "\1\0\1\53\1\0\1\53\1\0\1\53\1\0\2\53"+
    "\3\0\1\53\12\0\11\53\1\0\1\53\3\0\7\53"+
    "\2\0\2\53\1\0\5\53\1\0\1\53\1\252\6\53"+
    "\1\0\5\53\1\0\1\53\1\0\1\53\1\0\1\53"+
    "\1\0\2\53\3\0\1\53\12\0\1\53\1\253\7\53"+
    "\1\0\1\53\3\0\7\53\2\0\2\53\1\0\1\53"+
    "\1\254\3\53\1\0\10\53\1\0\5\53\1\0\1\53"+
    "\1\0\1\53\1\0\1\53\1\0\2\53\3\0\1\53"+
    "\12\0\1\255\10\53\1\0\1\53\3\0\7\53\2\0"+
    "\2\53\1\0\5\53\1\0\10\53\1\0\5\53\1\0"+
    "\1\53\1\0\1\53\1\0\1\53\1\0\2\53\3\0"+
    "\1\53\12\0\10\53\1\256\1\0\1\53\3\0\7\53"+
    "\2\0\2\53\1\0\5\53\1\0\10\53\1\0\5\53"+
    "\1\0\1\53\1\0\1\53\1\0\1\53\1\0\2\53"+
    "\3\0\1\53\12\0\11\53\1\0\1\53\3\0\1\53"+
    "\1\257\5\53\2\0\2\53\1\0\5\53\1\0\10\53"+
    "\1\0\5\53\1\0\1\53\1\0\1\53\1\0\1\53"+
    "\1\0\2\53\3\0\1\53\12\0\11\53\1\0\1\53"+
    "\3\0\1\53\1\260\5\53\2\0\2\53\1\0\5\53"+
    "\1\0\10\53\1\0\5\53\1\0\1\53\1\0\1\53"+
    "\1\0\1\53\1\0\2\53\3\0\1\53\12\0\3\53"+
    "\1\261\5\53\1\0\1\53\3\0\7\53\2\0\1\262"+
    "\1\53\1\0\5\53\1\0\10\53\1\0\5\53\1\0"+
    "\1\53\1\0\1\53\1\0\1\53\1\0\2\53\3\0"+
    "\1\53\12\0\5\53\1\263\3\53\1\0\1\53\3\0"+
    "\7\53\2\0\2\53\1\0\5\53\1\0\10\53\1\0"+
    "\5\53\1\0\1\53\1\0\1\53\1\0\1\53\1\0"+
    "\2\53\3\0\1\53\12\0\10\53\1\264\1\0\1\53"+
    "\3\0\7\53\2\0\2\53\1\0\5\53\1\0\10\53"+
    "\1\0\5\53\1\0\1\53\1\0\1\53\1\0\1\53"+
    "\1\0\2\53\3\0\1\53\12\0\7\53\1\265\1\53"+
    "\1\0\1\53\3\0\7\53\2\0\2\53\1\0\5\53"+
    "\1\0\10\53\1\0\5\53\1\0\1\53\1\0\1\53"+
    "\1\0\1\53\1\0\2\53\3\0\1\53\12\0\3\53"+
    "\1\266\5\53\1\0\1\53\3\0\7\53\2\0\2\53"+
    "\1\0\5\53\1\0\10\53\1\0\5\53\1\0\1\53"+
    "\1\0\1\53\1\0\1\53\15\0\1\267\44\0\1\270"+
    "\37\0\1\271\53\0\1\272\30\0\1\267\70\0\2\53"+
    "\3\0\1\53\12\0\11\53\1\0\1\53\3\0\4\53"+
    "\1\273\2\53\2\0\2\53\1\0\5\53\1\0\10\53"+
    "\1\0\5\53\1\0\1\53\1\0\1\53\1\0\1\53"+
    "\1\0\2\53\3\0\1\53\12\0\11\53\1\0\1\53"+
    "\3\0\7\53\2\0\2\53\1\0\3\53\1\274\1\53"+
    "\1\0\10\53\1\0\5\53\1\0\1\53\1\0\1\53"+
    "\1\0\1\53\1\0\2\53\3\0\1\53\12\0\11\53"+
    "\1\0\1\53\3\0\7\53\2\0\2\53\1\0\3\53"+
    "\1\275\1\53\1\0\10\53\1\0\5\53\1\0\1\53"+
    "\1\0\1\53\1\0\1\53\1\0\2\53\3\0\1\53"+
    "\12\0\11\53\1\0\1\53\3\0\7\53\2\0\2\53"+
    "\1\0\3\53\1\276\1\53\1\0\10\53\1\0\5\53"+
    "\1\0\1\53\1\0\1\53\1\0\1\53\1\0\2\53"+
    "\3\0\1\53\12\0\11\53\1\0\1\53\3\0\5\53"+
    "\1\277\1\53\2\0\2\53\1\0\5\53\1\0\10\53"+
    "\1\0\5\53\1\0\1\53\1\0\1\53\1\0\1\53"+
    "\1\0\2\53\3\0\1\53\12\0\11\53\1\0\1\53"+
    "\3\0\7\53\2\0\2\53\1\0\5\53\1\0\6\53"+
    "\1\300\1\53\1\0\5\53\1\0\1\53\1\0\1\53"+
    "\1\0\1\53\1\0\2\177\3\0\1\177\12\0\11\177"+
    "\1\0\1\177\3\0\7\177\2\0\2\177\1\0\5\177"+
    "\1\0\10\177\1\0\5\177\1\0\1\177\1\0\1\177"+
    "\1\0\1\177\1\0\1\177\1\200\3\0\1\177\12\0"+
    "\11\177\1\0\1\177\3\0\7\177\2\0\2\177\1\0"+
    "\5\177\1\0\10\177\1\0\5\177\1\0\1\177\1\0"+
    "\1\177\1\0\1\177\1\0\2\177\3\0\1\177\1\201"+
    "\11\0\11\177\1\0\1\177\3\0\7\177\2\0\2\177"+
    "\1\0\5\177\1\0\10\177\1\0\5\177\1\0\1\177"+
    "\1\0\1\177\1\0\1\177\2\0\1\202\103\0\2\53"+
    "\3\0\1\53\12\0\3\53\1\301\5\53\1\0\1\53"+
    "\3\0\7\53\2\0\2\53\1\0\5\53\1\0\10\53"+
    "\1\0\5\53\1\0\1\53\1\0\1\53\1\0\1\53"+
    "\1\0\2\53\3\0\1\53\12\0\1\302\10\53\1\0"+
    "\1\53\3\0\7\53\2\0\2\53\1\0\5\53\1\0"+
    "\10\53\1\0\5\53\1\0\1\53\1\0\1\53\1\0"+
    "\1\53\1\0\2\53\3\0\1\53\12\0\6\53\1\303"+
    "\2\53\1\0\1\53\3\0\7\53\2\0\1\304\1\53"+
    "\1\0\1\305\1\306\3\53\1\0\2\53\1\307\5\53"+
    "\1\0\5\53\1\0\1\53\1\0\1\53\1\0\1\53"+
    "\1\0\2\53\3\0\1\53\12\0\7\53\1\310\1\53"+
    "\1\0\1\53\3\0\7\53\2\0\2\53\1\0\5\53"+
    "\1\0\10\53\1\0\5\53\1\0\1\53\1\0\1\53"+
    "\1\0\1\53\1\0\2\53\3\0\1\53\12\0\11\53"+
    "\1\0\1\53\3\0\1\311\6\53\2\0\2\53\1\0"+
    "\5\53\1\0\10\53\1\0\5\53\1\0\1\53\1\0"+
    "\1\53\1\0\1\53\1\0\2\53\3\0\1\53\12\0"+
    "\1\312\10\53\1\0\1\53\3\0\7\53\2\0\2\53"+
    "\1\0\5\53\1\0\10\53\1\0\5\53\1\0\1\53"+
    "\1\0\1\53\1\0\1\53\1\0\2\53\3\0\1\53"+
    "\12\0\7\53\1\255\1\53\1\0\1\53\3\0\7\53"+
    "\2\0\2\53\1\0\5\53\1\0\10\53\1\0\5\53"+
    "\1\0\1\53\1\0\1\53\1\0\1\53\1\0\2\53"+
    "\3\0\1\53\12\0\6\53\1\313\1\314\1\53\1\0"+
    "\1\53\3\0\7\53\2\0\2\53\1\0\5\53\1\0"+
    "\10\53\1\0\5\53\1\0\1\53\1\0\1\53\1\0"+
    "\1\53\1\0\2\53\3\0\1\53\12\0\1\315\10\53"+
    "\1\0\1\53\3\0\7\53\2\0\2\53\1\0\5\53"+
    "\1\0\10\53\1\0\5\53\1\0\1\53\1\0\1\53"+
    "\1\0\1\53\1\0\2\53\3\0\1\53\12\0\1\53"+
    "\1\316\7\53\1\0\1\53\3\0\7\53\2\0\2\53"+
    "\1\0\5\53\1\0\10\53\1\0\5\53\1\0\1\53"+
    "\1\0\1\53\1\0\1\53\1\0\2\53\3\0\1\53"+
    "\12\0\11\53\1\0\1\53\3\0\1\317\6\53\2\0"+
    "\2\53\1\0\5\53\1\0\10\53\1\0\5\53\1\0"+
    "\1\53\1\0\1\53\1\0\1\53\1\0\2\53\3\0"+
    "\1\53\12\0\11\53\1\0\1\53\3\0\1\53\1\320"+
    "\5\53\2\0\2\53\1\0\5\53\1\0\10\53\1\0"+
    "\5\53\1\0\1\53\1\0\1\53\1\0\1\53\1\0"+
    "\2\53\3\0\1\53\12\0\6\53\1\321\2\53\1\0"+
    "\1\53\3\0\7\53\2\0\2\53\1\0\5\53\1\0"+
    "\10\53\1\0\5\53\1\0\1\53\1\0\1\53\1\0"+
    "\1\53\1\0\2\53\3\0\1\53\12\0\11\53\1\0"+
    "\1\53\3\0\1\53\1\322\5\53\2\0\2\53\1\0"+
    "\5\53\1\0\10\53\1\0\5\53\1\0\1\53\1\0"+
    "\1\53\1\0\1\53\1\0\2\53\3\0\1\53\12\0"+
    "\7\53\1\323\1\53\1\0\1\53\3\0\7\53\2\0"+
    "\2\53\1\0\5\53\1\0\10\53\1\0\5\53\1\0"+
    "\1\53\1\0\1\53\1\0\1\53\1\0\2\53\3\0"+
    "\1\53\12\0\4\53\1\324\4\53\1\0\1\53\3\0"+
    "\7\53\2\0\2\53\1\0\5\53\1\0\10\53\1\0"+
    "\5\53\1\0\1\53\1\0\1\53\1\0\1\53\1\0"+
    "\2\53\3\0\1\53\12\0\4\53\1\325\4\53\1\0"+
    "\1\53\3\0\7\53\2\0\2\53\1\0\5\53\1\0"+
    "\10\53\1\0\5\53\1\0\1\53\1\0\1\53\1\0"+
    "\1\53\1\0\2\53\3\0\1\53\12\0\7\53\1\326"+
    "\1\53\1\0\1\53\3\0\7\53\2\0\2\53\1\0"+
    "\5\53\1\0\10\53\1\0\5\53\1\0\1\53\1\0"+
    "\1\53\1\0\1\53\1\0\2\53\3\0\1\53\12\0"+
    "\11\53\1\0\1\53\3\0\7\53\2\0\1\53\1\327"+
    "\1\0\5\53\1\0\10\53\1\0\5\53\1\0\1\53"+
    "\1\0\1\53\1\0\1\53\1\0\2\53\3\0\1\53"+
    "\12\0\11\53\1\0\1\53\3\0\7\53\2\0\1\53"+
    "\1\330\1\0\5\53\1\0\10\53\1\0\5\53\1\0"+
    "\1\53\1\0\1\53\1\0\1\53\102\0\1\331\33\0"+
    "\1\332\77\0\1\333\105\0\1\334\107\0\1\335\125\0"+
    "\1\336\57\0\1\337\61\0\2\53\3\0\1\53\12\0"+
    "\7\53\1\340\1\53\1\0\1\53\3\0\7\53\2\0"+
    "\2\53\1\0\5\53\1\0\10\53\1\0\5\53\1\0"+
    "\1\53\1\0\1\53\1\0\1\53\1\0\2\53\3\0"+
    "\1\53\12\0\1\341\10\53\1\0\1\53\3\0\7\53"+
    "\2\0\2\53\1\0\5\53\1\0\10\53\1\0\5\53"+
    "\1\0\1\53\1\0\1\53\1\0\1\53\1\0\2\53"+
    "\3\0\1\53\12\0\1\342\10\53\1\0\1\53\3\0"+
    "\7\53\2\0\2\53\1\0\5\53\1\0\10\53\1\0"+
    "\5\53\1\0\1\53\1\0\1\53\1\0\1\53\1\0"+
    "\2\53\3\0\1\53\12\0\11\53\1\0\1\53\3\0"+
    "\1\343\6\53\2\0\2\53\1\0\5\53\1\0\10\53"+
    "\1\0\5\53\1\0\1\53\1\0\1\53\1\0\1\53"+
    "\1\0\2\53\3\0\1\53\12\0\7\53\1\344\1\53"+
    "\1\0\1\53\3\0\7\53\2\0\2\53\1\0\5\53"+
    "\1\0\10\53\1\0\5\53\1\0\1\53\1\0\1\53"+
    "\1\0\1\53\1\0\2\53\3\0\1\53\12\0\1\345"+
    "\10\53\1\0\1\53\3\0\7\53\2\0\2\53\1\0"+
    "\5\53\1\0\10\53\1\0\5\53\1\0\1\53\1\0"+
    "\1\53\1\0\1\53\1\0\2\53\3\0\1\53\12\0"+
    "\11\53\1\0\1\53\3\0\1\346\6\53\2\0\2\53"+
    "\1\0\5\53\1\0\10\53\1\0\5\53\1\0\1\53"+
    "\1\0\1\53\1\0\1\53\1\0\2\53\3\0\1\53"+
    "\12\0\11\53\1\0\1\53\3\0\1\347\6\53\2\0"+
    "\2\53\1\0\5\53\1\0\10\53\1\0\5\53\1\0"+
    "\1\53\1\0\1\53\1\0\1\53\1\0\2\53\3\0"+
    "\1\53\12\0\4\53\1\350\4\53\1\0\1\53\3\0"+
    "\7\53\2\0\2\53\1\0\5\53\1\0\10\53\1\0"+
    "\5\53\1\0\1\53\1\0\1\53\1\0\1\53\1\0"+
    "\2\53\3\0\1\53\12\0\1\351\10\53\1\0\1\53"+
    "\3\0\7\53\2\0\2\53\1\0\5\53\1\0\10\53"+
    "\1\0\5\53\1\0\1\53\1\0\1\53\1\0\1\53"+
    "\1\0\2\53\3\0\1\53\12\0\4\53\1\352\4\53"+
    "\1\0\1\53\3\0\7\53\2\0\2\53\1\0\5\53"+
    "\1\0\10\53\1\0\5\53\1\0\1\53\1\0\1\53"+
    "\1\0\1\53\1\0\2\53\3\0\1\53\12\0\1\53"+
    "\1\353\7\53\1\0\1\53\3\0\7\53\2\0\2\53"+
    "\1\0\5\53\1\0\10\53\1\0\5\53\1\0\1\53"+
    "\1\0\1\53\1\0\1\53\1\0\2\53\3\0\1\53"+
    "\12\0\7\53\1\354\1\53\1\0\1\53\3\0\7\53"+
    "\2\0\2\53\1\0\5\53\1\0\10\53\1\0\5\53"+
    "\1\0\1\53\1\0\1\53\1\0\1\53\1\0\2\53"+
    "\3\0\1\53\12\0\11\53\1\0\1\53\3\0\1\53"+
    "\1\355\5\53\2\0\2\53\1\0\5\53\1\0\3\53"+
    "\1\356\4\53\1\0\5\53\1\0\1\53\1\0\1\53"+
    "\1\0\1\53\1\0\2\53\3\0\1\53\12\0\11\53"+
    "\1\0\1\53\3\0\1\357\6\53\2\0\2\53\1\0"+
    "\5\53\1\0\10\53\1\0\5\53\1\0\1\53\1\0"+
    "\1\53\1\0\1\53\1\0\2\53\3\0\1\53\12\0"+
    "\3\53\1\360\5\53\1\0\1\53\3\0\7\53\2\0"+
    "\2\53\1\0\5\53\1\0\10\53\1\0\5\53\1\0"+
    "\1\53\1\0\1\53\1\0\1\53\1\0\2\53\3\0"+
    "\1\53\12\0\5\53\1\361\3\53\1\0\1\53\3\0"+
    "\7\53\2\0\2\53\1\0\5\53\1\0\10\53\1\0"+
    "\5\53\1\0\1\53\1\0\1\53\1\0\1\53\23\0"+
    "\1\362\62\0\2\53\3\0\1\53\12\0\11\53\1\0"+
    "\1\53\3\0\5\53\1\363\1\53\2\0\2\53\1\0"+
    "\5\53\1\0\10\53\1\0\5\53\1\0\1\53\1\0"+
    "\1\53\1\0\1\53\1\0\2\53\3\0\1\53\12\0"+
    "\11\53\1\0\1\53\3\0\7\53\2\0\2\53\1\0"+
    "\5\53\1\0\10\53\1\0\1\364\4\53\1\0\1\53"+
    "\1\0\1\53\1\0\1\53\1\0\2\53\3\0\1\53"+
    "\12\0\11\53\1\0\1\53\3\0\7\53\2\0\2\53"+
    "\1\0\4\53\1\365\1\0\10\53\1\0\5\53\1\0"+
    "\1\53\1\0\1\53\1\0\1\53\1\0\2\53\3\0"+
    "\1\53\12\0\11\53\1\0\1\53\3\0\4\53\1\366"+
    "\2\53\2\0\2\53\1\0\5\53\1\0\10\53\1\0"+
    "\5\53\1\0\1\53\1\0\1\53\1\0\1\53\1\0"+
    "\2\53\3\0\1\53\12\0\11\53\1\0\1\53\3\0"+
    "\7\53\2\0\2\53\1\0\5\53\1\0\10\53\1\0"+
    "\1\53\1\367\3\53\1\0\1\53\1\0\1\53\1\0"+
    "\1\53\1\0\2\53\3\0\1\53\12\0\11\53\1\0"+
    "\1\53\3\0\7\53\2\0\2\53\1\0\5\53\1\0"+
    "\10\53\1\0\2\53\1\370\2\53\1\0\1\53\1\0"+
    "\1\53\1\0\1\53\1\0\2\53\3\0\1\53\12\0"+
    "\11\53\1\0\1\53\3\0\7\53\2\0\1\371\1\53"+
    "\1\0\5\53\1\0\10\53\1\0\5\53\1\0\1\53"+
    "\1\0\1\53\1\0\1\53\1\0\2\53\3\0\1\53"+
    "\12\0\11\53\1\0\1\53\3\0\7\53\2\0\2\53"+
    "\1\0\5\53\1\0\2\53\1\372\5\53\1\0\5\53"+
    "\1\0\1\53\1\0\1\53\1\0\1\53\1\0\2\53"+
    "\3\0\1\53\12\0\11\53\1\0\1\53\3\0\7\53"+
    "\2\0\2\53\1\0\1\53\1\373\3\53\1\0\10\53"+
    "\1\0\5\53\1\0\1\53\1\0\1\53\1\0\1\53"+
    "\1\0\2\53\3\0\1\53\12\0\1\374\10\53\1\0"+
    "\1\53\3\0\7\53\2\0\2\53\1\0\5\53\1\0"+
    "\10\53\1\0\5\53\1\0\1\53\1\0\1\53\1\0"+
    "\1\53\1\0\2\53\3\0\1\53\12\0\3\53\1\375"+
    "\5\53\1\0\1\53\3\0\7\53\2\0\2\53\1\0"+
    "\5\53\1\0\10\53\1\0\5\53\1\0\1\53\1\0"+
    "\1\53\1\0\1\53\1\0\2\53\3\0\1\53\12\0"+
    "\2\53\1\376\6\53\1\0\1\53\3\0\7\53\2\0"+
    "\2\53\1\0\5\53\1\0\10\53\1\0\5\53\1\0"+
    "\1\53\1\0\1\53\1\0\1\53\1\0\2\53\3\0"+
    "\1\53\12\0\11\53\1\0\1\377\3\0\7\53\2\0"+
    "\2\53\1\0\5\53\1\0\10\53\1\0\5\53\1\0"+
    "\1\53\1\0\1\53\1\0\1\53\1\0\2\53\3\0"+
    "\1\53\12\0\11\53\1\0\1\53\3\0\1\53\1\u0100"+
    "\5\53\2\0\2\53\1\0\5\53\1\0\10\53\1\0"+
    "\5\53\1\0\1\53\1\0\1\53\1\0\1\53\1\0"+
    "\2\53\3\0\1\53\12\0\7\53\1\u0101\1\53\1\0"+
    "\1\53\3\0\7\53\2\0\2\53\1\0\5\53\1\0"+
    "\10\53\1\0\5\53\1\0\1\53\1\0\1\53\1\0"+
    "\1\53\1\0\2\53\3\0\1\53\12\0\11\53\1\0"+
    "\1\53\3\0\7\53\2\0\1\u0102\1\53\1\0\5\53"+
    "\1\0\10\53\1\0\5\53\1\0\1\53\1\0\1\53"+
    "\1\0\1\53\1\0\2\53\3\0\1\53\12\0\2\53"+
    "\1\u0103\6\53\1\0\1\53\3\0\7\53\2\0\2\53"+
    "\1\0\5\53\1\0\10\53\1\0\5\53\1\0\1\53"+
    "\1\0\1\53\1\0\1\53\1\0\2\53\3\0\1\53"+
    "\12\0\4\53\1\u0104\4\53\1\0\1\53\3\0\7\53"+
    "\2\0\2\53\1\0\5\53\1\0\10\53\1\0\5\53"+
    "\1\0\1\53\1\0\1\53\1\0\1\53\1\0\2\53"+
    "\3\0\1\53\12\0\1\u0105\10\53\1\0\1\53\3\0"+
    "\7\53\2\0\2\53\1\0\5\53\1\0\10\53\1\0"+
    "\5\53\1\0\1\53\1\0\1\53\1\0\1\53\1\0"+
    "\2\53\3\0\1\53\12\0\6\53\1\u0106\2\53\1\0"+
    "\1\53\3\0\7\53\2\0\2\53\1\0\5\53\1\0"+
    "\10\53\1\0\5\53\1\0\1\53\1\0\1\53\1\0"+
    "\1\53\1\0\2\53\3\0\1\53\12\0\1\53\1\u0107"+
    "\7\53\1\0\1\53\3\0\7\53\2\0\2\53\1\0"+
    "\5\53\1\0\10\53\1\0\5\53\1\0\1\53\1\0"+
    "\1\53\1\0\1\53\1\0\2\53\3\0\1\53\12\0"+
    "\10\53\1\u0108\1\0\1\53\3\0\7\53\2\0\2\53"+
    "\1\0\5\53\1\0\10\53\1\0\5\53\1\0\1\53"+
    "\1\0\1\53\1\0\1\53\1\0\2\53\3\0\1\53"+
    "\12\0\11\53\1\0\1\u0109\3\0\7\53\2\0\2\53"+
    "\1\0\5\53\1\0\10\53\1\0\5\53\1\0\1\53"+
    "\1\0\1\53\1\0\1\53\1\0\2\53\3\0\1\53"+
    "\12\0\11\53\1\0\1\53\3\0\2\53\1\u010a\4\53"+
    "\2\0\2\53\1\0\5\53\1\0\10\53\1\0\5\53"+
    "\1\0\1\53\1\0\1\53\1\0\1\53\1\0\2\53"+
    "\3\0\1\53\12\0\11\53\1\0\1\53\3\0\7\53"+
    "\2\0\1\u010b\1\53\1\0\5\53\1\0\10\53\1\0"+
    "\5\53\1\0\1\53\1\0\1\53\1\0\1\53\1\0"+
    "\2\53\3\0\1\53\12\0\10\53\1\u010c\1\0\1\53"+
    "\3\0\7\53\2\0\2\53\1\0\5\53\1\0\10\53"+
    "\1\0\5\53\1\0\1\53\1\0\1\53\1\0\1\53"+
    "\1\0\2\53\3\0\1\53\12\0\11\53\1\0\1\53"+
    "\3\0\7\53\2\0\1\u010d\1\53\1\0\5\53\1\0"+
    "\10\53\1\0\5\53\1\0\1\53\1\0\1\53\1\0"+
    "\1\53\21\0\1\u010e\110\0\1\u010f\116\0\1\u0110\104\0"+
    "\1\u0111\66\0\1\u0112\13\0\1\u0113\75\0\1\u0114\103\0"+
    "\1\u0115\60\0\2\53\3\0\1\53\12\0\6\53\1\u0116"+
    "\2\53\1\0\1\53\3\0\7\53\2\0\2\53\1\0"+
    "\5\53\1\0\10\53\1\0\5\53\1\0\1\53\1\0"+
    "\1\53\1\0\1\53\1\0\2\53\3\0\1\53\12\0"+
    "\7\53\1\u0117\1\53\1\0\1\53\3\0\7\53\2\0"+
    "\2\53\1\0\5\53\1\0\10\53\1\0\5\53\1\0"+
    "\1\53\1\0\1\53\1\0\1\53\1\0\2\53\3\0"+
    "\1\53\12\0\11\53\1\0\1\53\3\0\7\53\2\0"+
    "\1\53\1\u0118\1\0\5\53\1\0\10\53\1\0\5\53"+
    "\1\0\1\53\1\0\1\53\1\0\1\53\1\0\2\53"+
    "\3\0\1\53\12\0\1\u0119\3\53\1\u011a\4\53\1\0"+
    "\1\53\3\0\7\53\2\0\2\53\1\0\5\53\1\0"+
    "\10\53\1\0\5\53\1\0\1\53\1\0\1\53\1\0"+
    "\1\53\1\0\2\53\3\0\1\53\12\0\10\53\1\u011b"+
    "\1\0\1\53\3\0\7\53\2\0\2\53\1\0\5\53"+
    "\1\0\10\53\1\0\5\53\1\0\1\53\1\0\1\53"+
    "\1\0\1\53\1\0\2\53\3\0\1\53\12\0\1\u011c"+
    "\10\53\1\0\1\53\3\0\7\53\2\0\2\53\1\0"+
    "\5\53\1\0\10\53\1\0\5\53\1\0\1\53\1\0"+
    "\1\53\1\0\1\53\1\0\2\53\3\0\1\53\12\0"+
    "\4\53\1\u011d\4\53\1\0\1\53\3\0\7\53\2\0"+
    "\2\53\1\0\5\53\1\0\10\53\1\0\5\53\1\0"+
    "\1\53\1\0\1\53\1\0\1\53\1\0\2\53\3\0"+
    "\1\53\12\0\11\53\1\0\1\53\3\0\7\53\2\0"+
    "\1\53\1\u011e\1\0\5\53\1\0\10\53\1\0\5\53"+
    "\1\0\1\53\1\0\1\53\1\0\1\53\1\0\2\53"+
    "\3\0\1\53\12\0\4\53\1\u011f\4\53\1\0\1\53"+
    "\3\0\7\53\2\0\2\53\1\0\5\53\1\0\10\53"+
    "\1\0\5\53\1\0\1\53\1\0\1\53\1\0\1\53"+
    "\1\0\2\53\3\0\1\53\12\0\11\53\1\0\1\53"+
    "\3\0\1\u0120\6\53\2\0\2\53\1\0\5\53\1\0"+
    "\10\53\1\0\5\53\1\0\1\53\1\0\1\53\1\0"+
    "\1\53\1\0\2\53\3\0\1\53\12\0\7\53\1\u0121"+
    "\1\53\1\0\1\53\3\0\7\53\2\0\2\53\1\0"+
    "\5\53\1\0\10\53\1\0\5\53\1\0\1\53\1\0"+
    "\1\53\1\0\1\53\1\0\2\53\3\0\1\53\12\0"+
    "\1\u0122\10\53\1\0\1\53\3\0\7\53\2\0\2\53"+
    "\1\0\5\53\1\0\10\53\1\0\5\53\1\0\1\53"+
    "\1\0\1\53\1\0\1\53\1\0\2\53\3\0\1\53"+
    "\12\0\7\53\1\u0123\1\53\1\0\1\53\3\0\7\53"+
    "\2\0\2\53\1\0\5\53\1\0\10\53\1\0\5\53"+
    "\1\0\1\53\1\0\1\53\1\0\1\53\1\0\2\53"+
    "\3\0\1\53\12\0\4\53\1\u0124\4\53\1\0\1\53"+
    "\3\0\7\53\2\0\2\53\1\0\5\53\1\0\10\53"+
    "\1\0\5\53\1\0\1\53\1\0\1\53\1\0\1\53"+
    "\1\0\2\53\3\0\1\53\12\0\11\53\1\0\1\53"+
    "\3\0\7\53\2\0\1\u0125\1\53\1\0\5\53\1\0"+
    "\10\53\1\0\5\53\1\0\1\53\1\0\1\53\1\0"+
    "\1\53\1\0\2\53\3\0\1\53\12\0\4\53\1\u0126"+
    "\4\53\1\0\1\53\3\0\7\53\2\0\2\53\1\0"+
    "\5\53\1\0\10\53\1\0\5\53\1\0\1\53\1\0"+
    "\1\53\1\0\1\53\62\0\1\u0127\23\0\2\53\3\0"+
    "\1\53\12\0\11\53\1\0\1\53\3\0\6\53\1\u0128"+
    "\2\0\2\53\1\0\5\53\1\0\10\53\1\0\5\53"+
    "\1\0\1\53\1\0\1\53\1\0\1\53\1\0\2\53"+
    "\3\0\1\53\12\0\11\53\1\0\1\53\3\0\7\53"+
    "\2\0\2\53\1\0\5\53\1\0\6\53\1\u0129\1\53"+
    "\1\0\5\53\1\0\1\53\1\0\1\53\1\0\1\53"+
    "\1\0\1\u012a\1\53\3\0\1\53\12\0\11\53\1\0"+
    "\1\53\3\0\7\53\2\0\2\53\1\0\5\53\1\0"+
    "\10\53\1\0\5\53\1\0\1\53\1\0\1\53\1\0"+
    "\1\53\1\0\2\53\3\0\1\53\12\0\11\53\1\0"+
    "\1\53\3\0\7\53\2\0\2\53\1\0\5\53\1\0"+
    "\6\53\1\u012b\1\53\1\0\5\53\1\0\1\53\1\0"+
    "\1\53\1\0\1\53\1\0\2\53\3\0\1\53\12\0"+
    "\11\53\1\0\1\53\3\0\7\53\2\0\2\53\1\0"+
    "\5\53\1\0\6\53\1\u012c\1\53\1\0\5\53\1\0"+
    "\1\53\1\0\1\53\1\0\1\53\1\0\2\53\3\0"+
    "\1\53\12\0\11\53\1\0\1\53\3\0\7\53\2\0"+
    "\2\53\1\0\5\53\1\0\10\53\1\0\3\53\1\u012d"+
    "\1\53\1\0\1\53\1\0\1\53\1\0\1\53\1\0"+
    "\2\53\3\0\1\53\12\0\11\53\1\0\1\53\3\0"+
    "\7\53\2\0\2\53\1\0\1\53\1\u012e\3\53\1\0"+
    "\10\53\1\0\5\53\1\0\1\53\1\0\1\53\1\0"+
    "\1\53\1\0\2\53\3\0\1\53\12\0\11\53\1\0"+
    "\1\53\3\0\7\53\2\0\1\u012f\1\53\1\0\5\53"+
    "\1\0\10\53\1\0\5\53\1\0\1\53\1\0\1\53"+
    "\1\0\1\53\1\0\2\53\3\0\1\53\12\0\1\53"+
    "\1\u0130\7\53\1\0\1\53\3\0\7\53\2\0\2\53"+
    "\1\0\5\53\1\0\10\53\1\0\5\53\1\0\1\53"+
    "\1\0\1\53\1\0\1\53\1\0\2\53\3\0\1\53"+
    "\12\0\10\53\1\u0131\1\0\1\53\3\0\7\53\2\0"+
    "\2\53\1\0\5\53\1\0\10\53\1\0\5\53\1\0"+
    "\1\53\1\0\1\53\1\0\1\53\1\0\2\53\3\0"+
    "\1\53\12\0\11\53\1\0\1\53\3\0\7\53\2\0"+
    "\1\u0132\1\53\1\0\5\53\1\0\10\53\1\0\5\53"+
    "\1\0\1\53\1\0\1\53\1\0\1\53\1\0\2\53"+
    "\3\0\1\53\12\0\11\53\1\0\1\53\3\0\7\53"+
    "\2\0\2\53\1\0\1\u0133\4\53\1\0\10\53\1\0"+
    "\5\53\1\0\1\53\1\0\1\53\1\0\1\53\1\0"+
    "\2\53\3\0\1\53\12\0\11\53\1\0\1\53\3\0"+
    "\1\53\1\u0134\5\53\2\0\2\53\1\0\5\53\1\0"+
    "\10\53\1\0\5\53\1\0\1\53\1\0\1\53\1\0"+
    "\1\53\1\0\2\53\3\0\1\53\12\0\5\53\1\u0135"+
    "\3\53\1\0\1\53\3\0\7\53\2\0\2\53\1\0"+
    "\5\53\1\0\10\53\1\0\5\53\1\0\1\53\1\0"+
    "\1\53\1\0\1\53\1\0\2\53\3\0\1\53\12\0"+
    "\7\53\1\u0136\1\53\1\0\1\53\3\0\7\53\2\0"+
    "\2\53\1\0\5\53\1\0\10\53\1\0\5\53\1\0"+
    "\1\53\1\0\1\53\1\0\1\53\1\0\2\53\3\0"+
    "\1\53\12\0\4\53\1\u0137\4\53\1\0\1\53\3\0"+
    "\7\53\2\0\2\53\1\0\5\53\1\0\10\53\1\0"+
    "\5\53\1\0\1\53\1\0\1\53\1\0\1\53\1\0"+
    "\2\53\3\0\1\53\12\0\1\53\1\u0138\7\53\1\0"+
    "\1\53\3\0\7\53\2\0\2\53\1\0\5\53\1\0"+
    "\10\53\1\0\5\53\1\0\1\53\1\0\1\53\1\0"+
    "\1\53\1\0\2\53\3\0\1\53\12\0\11\53\1\0"+
    "\1\53\3\0\1\53\1\u0139\5\53\2\0\2\53\1\0"+
    "\5\53\1\0\10\53\1\0\5\53\1\0\1\53\1\0"+
    "\1\53\1\0\1\53\1\0\2\53\3\0\1\53\12\0"+
    "\10\53\1\u013a\1\0\1\53\3\0\7\53\2\0\2\53"+
    "\1\0\5\53\1\0\10\53\1\0\5\53\1\0\1\53"+
    "\1\0\1\53\1\0\1\53\22\0\1\u013b\115\0\1\u013c"+
    "\72\0\1\u013d\13\0\1\u013e\104\0\1\u013f\137\0\1\u0140"+
    "\53\0\1\u0141\75\0\1\u0111\55\0\2\53\3\0\1\53"+
    "\12\0\11\53\1\0\1\53\3\0\7\53\2\0\2\53"+
    "\1\0\5\53\1\0\1\53\1\u0142\6\53\1\0\5\53"+
    "\1\0\1\53\1\0\1\53\1\0\1\53\1\0\2\53"+
    "\3\0\1\53\12\0\11\53\1\0\1\53\3\0\7\53"+
    "\2\0\2\53\1\0\1\u0143\4\53\1\0\10\53\1\0"+
    "\5\53\1\0\1\53\1\0\1\53\1\0\1\53\1\0"+
    "\2\53\3\0\1\53\12\0\4\53\1\u0144\4\53\1\0"+
    "\1\53\3\0\7\53\2\0\2\53\1\0\5\53\1\0"+
    "\10\53\1\0\5\53\1\0\1\53\1\0\1\53\1\0"+
    "\1\53\1\0\2\53\3\0\1\53\12\0\11\53\1\0"+
    "\1\53\3\0\1\53\1\u0145\5\53\2\0\2\53\1\0"+
    "\5\53\1\0\10\53\1\0\5\53\1\0\1\53\1\0"+
    "\1\53\1\0\1\53\1\0\2\53\3\0\1\53\12\0"+
    "\11\53\1\0\1\53\3\0\7\53\2\0\2\53\1\0"+
    "\1\53\1\u0146\3\53\1\0\10\53\1\0\5\53\1\0"+
    "\1\53\1\0\1\53\1\0\1\53\1\0\2\53\3\0"+
    "\1\53\12\0\11\53\1\0\1\53\3\0\7\53\2\0"+
    "\2\53\1\0\5\53\1\0\1\u0147\7\53\1\0\5\53"+
    "\1\0\1\53\1\0\1\53\1\0\1\53\1\0\2\53"+
    "\3\0\1\53\12\0\10\53\1\u0148\1\0\1\53\3\0"+
    "\7\53\2\0\2\53\1\0\5\53\1\0\10\53\1\0"+
    "\5\53\1\0\1\53\1\0\1\53\1\0\1\53\1\0"+
    "\2\53\3\0\1\53\12\0\11\53\1\0\1\53\3\0"+
    "\1\u0149\6\53\2\0\2\53\1\0\5\53\1\0\10\53"+
    "\1\0\5\53\1\0\1\53\1\0\1\53\1\0\1\53"+
    "\1\0\2\53\3\0\1\53\12\0\1\53\1\u014a\7\53"+
    "\1\0\1\53\3\0\7\53\2\0\2\53\1\0\5\53"+
    "\1\0\10\53\1\0\5\53\1\0\1\53\1\0\1\53"+
    "\1\0\1\53\1\0\2\53\3\0\1\53\12\0\11\53"+
    "\1\0\1\53\3\0\1\u014b\6\53\2\0\2\53\1\0"+
    "\5\53\1\0\10\53\1\0\5\53\1\0\1\53\1\0"+
    "\1\53\1\0\1\53\1\0\2\53\3\0\1\53\12\0"+
    "\11\53\1\0\1\53\3\0\7\53\2\0\1\u014c\1\53"+
    "\1\0\5\53\1\0\10\53\1\0\5\53\1\0\1\53"+
    "\1\0\1\53\1\0\1\53\1\0\2\53\3\0\1\53"+
    "\12\0\1\53\1\u014d\7\53\1\0\1\53\3\0\7\53"+
    "\2\0\2\53\1\0\5\53\1\0\10\53\1\0\5\53"+
    "\1\0\1\53\1\0\1\53\1\0\1\53\1\0\2\53"+
    "\3\0\1\53\12\0\7\53\1\u014e\1\53\1\0\1\53"+
    "\3\0\7\53\2\0\2\53\1\0\5\53\1\0\10\53"+
    "\1\0\5\53\1\0\1\53\1\0\1\53\1\0\1\53"+
    "\1\0\2\53\3\0\1\53\12\0\1\53\1\u014f\7\53"+
    "\1\0\1\53\3\0\7\53\2\0\2\53\1\0\5\53"+
    "\1\0\10\53\1\0\5\53\1\0\1\53\1\0\1\53"+
    "\1\0\1\53\1\0\2\53\3\0\1\53\12\0\11\53"+
    "\1\0\1\53\3\0\1\u0150\6\53\2\0\2\53\1\0"+
    "\5\53\1\0\10\53\1\0\5\53\1\0\1\53\1\0"+
    "\1\53\1\0\1\53\1\0\2\53\3\0\1\53\12\0"+
    "\11\53\1\0\1\53\3\0\6\53\1\u0151\2\0\2\53"+
    "\1\0\5\53\1\0\10\53\1\0\5\53\1\0\1\53"+
    "\1\0\1\53\1\0\1\53\1\0\1\u0152\1\53\3\0"+
    "\1\53\12\0\11\53\1\0\1\53\3\0\7\53\2\0"+
    "\2\53\1\0\5\53\1\0\10\53\1\0\5\53\1\0"+
    "\1\53\1\0\1\53\1\0\1\53\1\0\1\u0153\1\53"+
    "\3\0\1\53\12\0\11\53\1\0\1\53\3\0\7\53"+
    "\2\0\2\53\1\0\5\53\1\0\10\53\1\0\5\53"+
    "\1\0\1\53\1\0\1\53\1\0\1\53\1\0\1\u0154"+
    "\1\53\3\0\1\53\12\0\11\53\1\0\1\53\3\0"+
    "\7\53\2\0\2\53\1\0\5\53\1\0\10\53\1\0"+
    "\5\53\1\0\1\53\1\0\1\53\1\0\1\53\1\0"+
    "\2\53\3\0\1\53\12\0\11\53\1\0\1\53\3\0"+
    "\6\53\1\u0155\2\0\2\53\1\0\5\53\1\0\10\53"+
    "\1\0\5\53\1\0\1\53\1\0\1\53\1\0\1\53"+
    "\1\0\2\53\3\0\1\53\12\0\11\53\1\0\1\53"+
    "\3\0\7\53\2\0\2\53\1\0\5\53\1\0\10\53"+
    "\1\0\4\53\1\u0156\1\0\1\53\1\0\1\53\1\0"+
    "\1\53\1\0\2\53\3\0\1\53\12\0\7\53\1\u0157"+
    "\1\53\1\0\1\53\3\0\7\53\2\0\2\53\1\0"+
    "\5\53\1\0\10\53\1\0\5\53\1\0\1\53\1\0"+
    "\1\53\1\0\1\53\1\0\2\53\3\0\1\53\12\0"+
    "\11\53\1\0\1\53\3\0\1\u0158\6\53\2\0\2\53"+
    "\1\0\5\53\1\0\10\53\1\0\5\53\1\0\1\53"+
    "\1\0\1\53\1\0\1\53\1\0\2\53\3\0\1\53"+
    "\12\0\1\u0159\10\53\1\0\1\53\3\0\7\53\2\0"+
    "\2\53\1\0\5\53\1\0\10\53\1\0\5\53\1\0"+
    "\1\53\1\0\1\53\1\0\1\53\1\0\2\53\3\0"+
    "\1\53\12\0\11\53\1\0\1\53\3\0\1\u015a\6\53"+
    "\2\0\2\53\1\0\5\53\1\0\10\53\1\0\5\53"+
    "\1\0\1\53\1\0\1\53\1\0\1\53\1\0\2\53"+
    "\3\0\1\53\12\0\6\53\1\u015b\2\53\1\0\1\53"+
    "\3\0\7\53\2\0\2\53\1\0\5\53\1\0\10\53"+
    "\1\0\5\53\1\0\1\53\1\0\1\53\1\0\1\53"+
    "\1\0\2\53\3\0\1\53\12\0\11\53\1\0\1\53"+
    "\3\0\7\53\2\0\1\53\1\u015c\1\0\5\53\1\0"+
    "\10\53\1\0\5\53\1\0\1\53\1\0\1\53\1\0"+
    "\1\53\1\0\2\53\3\0\1\53\12\0\11\53\1\0"+
    "\1\53\3\0\1\u015d\6\53\2\0\2\53\1\0\5\53"+
    "\1\0\10\53\1\0\5\53\1\0\1\53\1\0\1\53"+
    "\1\0\1\53\1\0\2\53\3\0\1\53\12\0\11\53"+
    "\1\0\1\53\3\0\7\53\2\0\1\u015e\1\53\1\0"+
    "\5\53\1\0\10\53\1\0\5\53\1\0\1\53\1\0"+
    "\1\53\1\0\1\53\1\0\2\53\3\0\1\53\12\0"+
    "\1\53\1\u015f\7\53\1\0\1\53\3\0\7\53\2\0"+
    "\2\53\1\0\5\53\1\0\10\53\1\0\5\53\1\0"+
    "\1\53\1\0\1\53\1\0\1\53\1\0\2\53\3\0"+
    "\1\53\12\0\1\u0160\10\53\1\0\1\53\3\0\7\53"+
    "\2\0\2\53\1\0\5\53\1\0\10\53\1\0\5\53"+
    "\1\0\1\53\1\0\1\53\1\0\1\53\30\0\1\u0161"+
    "\111\0\1\u0162\74\0\1\u0163\100\0\1\u0164\104\0\1\u0111"+
    "\64\0\2\53\3\0\1\53\12\0\4\53\1\u0165\4\53"+
    "\1\0\1\53\3\0\7\53\2\0\2\53\1\0\5\53"+
    "\1\0\10\53\1\0\5\53\1\0\1\53\1\0\1\53"+
    "\1\0\1\53\1\0\2\53\3\0\1\53\12\0\1\u0166"+
    "\10\53\1\0\1\53\3\0\7\53\2\0\2\53\1\0"+
    "\5\53\1\0\10\53\1\0\5\53\1\0\1\53\1\0"+
    "\1\53\1\0\1\53\1\0\2\53\3\0\1\53\12\0"+
    "\11\53\1\0\1\53\3\0\7\53\2\0\2\53\1\0"+
    "\1\u0167\4\53\1\0\10\53\1\0\5\53\1\0\1\53"+
    "\1\0\1\53\1\0\1\53\1\0\2\53\3\0\1\53"+
    "\12\0\1\53\1\u0168\7\53\1\0\1\53\3\0\7\53"+
    "\2\0\2\53\1\0\5\53\1\0\10\53\1\0\5\53"+
    "\1\0\1\53\1\0\1\53\1\0\1\53\1\0\2\53"+
    "\3\0\1\53\12\0\4\53\1\u0169\4\53\1\0\1\53"+
    "\3\0\7\53\2\0\2\53\1\0\5\53\1\0\10\53"+
    "\1\0\5\53\1\0\1\53\1\0\1\53\1\0\1\53"+
    "\1\0\2\53\3\0\1\53\12\0\1\u016a\10\53\1\0"+
    "\1\53\3\0\7\53\2\0\2\53\1\0\5\53\1\0"+
    "\10\53\1\0\5\53\1\0\1\53\1\0\1\53\1\0"+
    "\1\53\1\0\2\53\3\0\1\53\12\0\1\u016b\10\53"+
    "\1\0\1\53\3\0\7\53\2\0\2\53\1\0\5\53"+
    "\1\0\10\53\1\0\5\53\1\0\1\53\1\0\1\53"+
    "\1\0\1\53\1\0\2\53\3\0\1\53\12\0\7\53"+
    "\1\u016c\1\53\1\0\1\53\3\0\7\53\2\0\2\53"+
    "\1\0\5\53\1\0\10\53\1\0\5\53\1\0\1\53"+
    "\1\0\1\53\1\0\1\53\1\0\2\53\3\0\1\53"+
    "\12\0\2\53\1\u016d\6\53\1\0\1\53\3\0\7\53"+
    "\2\0\2\53\1\0\5\53\1\0\10\53\1\0\5\53"+
    "\1\0\1\53\1\0\1\53\1\0\1\53\1\0\2\53"+
    "\3\0\1\53\12\0\11\53\1\0\1\u016e\3\0\7\53"+
    "\2\0\2\53\1\0\5\53\1\0\10\53\1\0\5\53"+
    "\1\0\1\53\1\0\1\53\1\0\1\53\1\0\2\53"+
    "\3\0\1\53\12\0\3\53\1\u016f\5\53\1\0\1\53"+
    "\3\0\7\53\2\0\2\53\1\0\5\53\1\0\10\53"+
    "\1\0\5\53\1\0\1\53\1\0\1\53\1\0\1\53"+
    "\1\0\2\53\3\0\1\53\12\0\7\53\1\u0170\1\53"+
    "\1\0\1\53\3\0\7\53\2\0\2\53\1\0\5\53"+
    "\1\0\10\53\1\0\5\53\1\0\1\53\1\0\1\53"+
    "\1\0\1\53\1\0\2\53\3\0\1\53\12\0\1\u0171"+
    "\10\53\1\0\1\53\3\0\7\53\2\0\2\53\1\0"+
    "\5\53\1\0\10\53\1\0\5\53\1\0\1\53\1\0"+
    "\1\53\1\0\1\53\1\0\1\u0172\1\53\3\0\1\53"+
    "\12\0\11\53\1\0\1\53\3\0\7\53\2\0\2\53"+
    "\1\0\5\53\1\0\10\53\1\0\5\53\1\0\1\53"+
    "\1\0\1\53\1\0\1\53\1\0\1\u0173\1\53\3\0"+
    "\1\53\12\0\11\53\1\0\1\53\3\0\7\53\2\0"+
    "\2\53\1\0\5\53\1\0\10\53\1\0\5\53\1\0"+
    "\1\53\1\0\1\53\1\0\1\53\1\0\1\u0174\1\53"+
    "\3\0\1\53\12\0\11\53\1\0\1\53\3\0\7\53"+
    "\2\0\2\53\1\0\5\53\1\0\10\53\1\0\5\53"+
    "\1\0\1\53\1\0\1\53\1\0\1\53\1\0\2\53"+
    "\3\0\1\53\12\0\11\53\1\0\1\53\3\0\7\53"+
    "\2\0\2\53\1\0\5\53\1\0\10\53\1\0\5\53"+
    "\1\0\1\u0175\1\0\1\53\1\0\1\53\1\0\2\53"+
    "\3\0\1\53\12\0\11\53\1\0\1\53\3\0\7\53"+
    "\2\0\2\53\1\0\2\53\1\u0176\2\53\1\0\10\53"+
    "\1\0\5\53\1\0\1\53\1\0\1\53\1\0\1\53"+
    "\1\0\2\53\3\0\1\53\12\0\1\53\1\u0177\7\53"+
    "\1\0\1\53\3\0\7\53\2\0\2\53\1\0\5\53"+
    "\1\0\10\53\1\0\5\53\1\0\1\53\1\0\1\53"+
    "\1\0\1\53\1\0\2\53\3\0\1\53\12\0\4\53"+
    "\1\u0178\4\53\1\0\1\53\3\0\7\53\2\0\2\53"+
    "\1\0\5\53\1\0\10\53\1\0\5\53\1\0\1\53"+
    "\1\0\1\53\1\0\1\53\1\0\2\53\3\0\1\53"+
    "\12\0\4\53\1\u0179\4\53\1\0\1\53\3\0\7\53"+
    "\2\0\2\53\1\0\5\53\1\0\10\53\1\0\5\53"+
    "\1\0\1\53\1\0\1\53\1\0\1\53\1\0\2\53"+
    "\3\0\1\53\12\0\1\u017a\10\53\1\0\1\53\3\0"+
    "\7\53\2\0\2\53\1\0\5\53\1\0\10\53\1\0"+
    "\5\53\1\0\1\53\1\0\1\53\1\0\1\53\1\0"+
    "\2\53\3\0\1\53\12\0\1\u017b\10\53\1\0\1\53"+
    "\3\0\7\53\2\0\2\53\1\0\5\53\1\0\10\53"+
    "\1\0\5\53\1\0\1\53\1\0\1\53\1\0\1\53"+
    "\1\0\2\53\3\0\1\53\12\0\1\u017c\10\53\1\0"+
    "\1\53\3\0\7\53\2\0\2\53\1\0\5\53\1\0"+
    "\10\53\1\0\5\53\1\0\1\53\1\0\1\53\1\0"+
    "\1\53\1\0\2\53\3\0\1\53\12\0\3\53\1\u017d"+
    "\5\53\1\0\1\53\3\0\7\53\2\0\2\53\1\0"+
    "\5\53\1\0\10\53\1\0\5\53\1\0\1\53\1\0"+
    "\1\53\1\0\1\53\1\0\2\53\3\0\1\53\12\0"+
    "\7\53\1\u017e\1\53\1\0\1\53\3\0\7\53\2\0"+
    "\2\53\1\0\5\53\1\0\10\53\1\0\5\53\1\0"+
    "\1\53\1\0\1\53\1\0\1\53\1\0\1\u017f\1\53"+
    "\3\0\1\53\12\0\11\53\1\0\1\53\3\0\7\53"+
    "\2\0\2\53\1\0\5\53\1\0\10\53\1\0\5\53"+
    "\1\0\1\53\1\0\1\53\1\0\1\53\35\0\1\u0180"+
    "\107\0\1\u0181\75\0\1\u0182\54\0\2\53\3\0\1\53"+
    "\12\0\1\53\1\u0183\7\53\1\0\1\53\3\0\7\53"+
    "\2\0\2\53\1\0\5\53\1\0\10\53\1\0\5\53"+
    "\1\0\1\53\1\0\1\53\1\0\1\53\1\0\1\u0184"+
    "\1\53\3\0\1\53\12\0\11\53\1\0\1\53\3\0"+
    "\7\53\2\0\2\53\1\0\5\53\1\0\10\53\1\0"+
    "\5\53\1\0\1\53\1\0\1\53\1\0\1\53\1\0"+
    "\2\53\3\0\1\53\12\0\3\53\1\u0185\5\53\1\0"+
    "\1\53\3\0\7\53\2\0\2\53\1\0\5\53\1\0"+
    "\10\53\1\0\5\53\1\0\1\53\1\0\1\53\1\0"+
    "\1\53\1\0\2\53\3\0\1\53\12\0\1\u0186\10\53"+
    "\1\0\1\53\3\0\7\53\2\0\2\53\1\0\5\53"+
    "\1\0\10\53\1\0\5\53\1\0\1\53\1\0\1\53"+
    "\1\0\1\53\1\0\2\53\3\0\1\53\12\0\1\53"+
    "\1\u0187\7\53\1\0\1\53\3\0\7\53\2\0\2\53"+
    "\1\0\5\53\1\0\10\53\1\0\5\53\1\0\1\53"+
    "\1\0\1\53\1\0\1\53\1\0\2\53\3\0\1\53"+
    "\12\0\11\53\1\0\1\53\3\0\1\53\1\u0188\5\53"+
    "\2\0\2\53\1\0\5\53\1\0\10\53\1\0\5\53"+
    "\1\0\1\53\1\0\1\53\1\0\1\53\1\0\2\53"+
    "\3\0\1\53\12\0\11\53\1\0\1\53\3\0\1\53"+
    "\1\u0189\5\53\2\0\2\53\1\0\5\53\1\0\10\53"+
    "\1\0\5\53\1\0\1\53\1\0\1\53\1\0\1\53"+
    "\1\0\2\53\3\0\1\53\12\0\1\u018a\10\53\1\0"+
    "\1\53\3\0\7\53\2\0\2\53\1\0\5\53\1\0"+
    "\10\53\1\0\5\53\1\0\1\53\1\0\1\53\1\0"+
    "\1\53\1\0\1\u018b\1\53\3\0\1\53\12\0\11\53"+
    "\1\0\1\53\3\0\7\53\2\0\2\53\1\0\5\53"+
    "\1\0\10\53\1\0\5\53\1\0\1\53\1\0\1\53"+
    "\1\0\1\53\1\0\2\53\3\0\1\53\12\0\11\53"+
    "\1\0\1\53\3\0\5\53\1\u018c\1\53\2\0\2\53"+
    "\1\0\5\53\1\0\10\53\1\0\5\53\1\0\1\53"+
    "\1\0\1\53\1\0\1\53\1\0\1\u018d\1\53\3\0"+
    "\1\53\12\0\11\53\1\0\1\53\3\0\7\53\2\0"+
    "\2\53\1\0\5\53\1\0\10\53\1\0\5\53\1\0"+
    "\1\53\1\0\1\53\1\0\1\53\1\0\2\53\3\0"+
    "\1\53\12\0\2\53\1\u018e\6\53\1\0\1\53\3\0"+
    "\7\53\2\0\2\53\1\0\5\53\1\0\10\53\1\0"+
    "\5\53\1\0\1\53\1\0\1\53\1\0\1\53\1\0"+
    "\2\53\3\0\1\53\12\0\10\53\1\u018f\1\0\1\53"+
    "\3\0\7\53\2\0\2\53\1\0\5\53\1\0\10\53"+
    "\1\0\5\53\1\0\1\53\1\0\1\53\1\0\1\53"+
    "\1\0\2\53\3\0\1\53\12\0\1\53\1\u0190\7\53"+
    "\1\0\1\53\3\0\7\53\2\0\2\53\1\0\5\53"+
    "\1\0\10\53\1\0\5\53\1\0\1\53\1\0\1\53"+
    "\1\0\1\53\1\0\2\53\3\0\1\53\12\0\11\53"+
    "\1\0\1\53\3\0\1\53\1\u0191\5\53\2\0\2\53"+
    "\1\0\5\53\1\0\10\53\1\0\5\53\1\0\1\53"+
    "\1\0\1\53\1\0\1\53\1\0\2\53\3\0\1\53"+
    "\12\0\3\53\1\u0192\5\53\1\0\1\53\3\0\7\53"+
    "\2\0\2\53\1\0\5\53\1\0\10\53\1\0\5\53"+
    "\1\0\1\53\1\0\1\53\1\0\1\53\35\0\1\u013e"+
    "\104\0\1\u0113\50\0\2\53\3\0\1\53\12\0\1\u0193"+
    "\10\53\1\0\1\53\3\0\7\53\2\0\2\53\1\0"+
    "\5\53\1\0\10\53\1\0\5\53\1\0\1\53\1\0"+
    "\1\53\1\0\1\53\1\0\2\53\3\0\1\53\12\0"+
    "\3\53\1\u0194\5\53\1\0\1\53\3\0\7\53\2\0"+
    "\2\53\1\0\5\53\1\0\10\53\1\0\5\53\1\0"+
    "\1\53\1\0\1\53\1\0\1\53\1\0\2\53\3\0"+
    "\1\53\12\0\11\53\1\0\1\53\3\0\7\53\2\0"+
    "\2\53\1\0\1\53\1\u0195\3\53\1\0\10\53\1\0"+
    "\5\53\1\0\1\53\1\0\1\53\1\0\1\53\1\0"+
    "\2\53\3\0\1\53\12\0\3\53\1\u0196\5\53\1\0"+
    "\1\53\3\0\7\53\2\0\2\53\1\0\5\53\1\0"+
    "\10\53\1\0\5\53\1\0\1\53\1\0\1\53\1\0"+
    "\1\53\1\0\2\53\3\0\1\53\12\0\1\u0197\10\53"+
    "\1\0\1\53\3\0\7\53\2\0\2\53\1\0\5\53"+
    "\1\0\10\53\1\0\5\53\1\0\1\53\1\0\1\53"+
    "\1\0\1\53\1\0\2\53\3\0\1\53\12\0\7\53"+
    "\1\u0198\1\53\1\0\1\53\3\0\7\53\2\0\2\53"+
    "\1\0\5\53\1\0\10\53\1\0\5\53\1\0\1\53"+
    "\1\0\1\53\1\0\1\53\1\0\2\53\3\0\1\53"+
    "\12\0\11\53\1\0\1\53\3\0\7\53\2\0\2\53"+
    "\1\0\1\u0199\4\53\1\0\10\53\1\0\5\53\1\0"+
    "\1\53\1\0\1\53\1\0\1\53\1\0\2\53\3\0"+
    "\1\53\12\0\11\53\1\0\1\53\3\0\3\53\1\u019a"+
    "\3\53\2\0\2\53\1\0\5\53\1\0\10\53\1\0"+
    "\5\53\1\0\1\53\1\0\1\53\1\0\1\53\1\0"+
    "\1\u019b\1\53\3\0\1\53\12\0\11\53\1\0\1\53"+
    "\3\0\7\53\2\0\2\53\1\0\5\53\1\0\10\53"+
    "\1\0\5\53\1\0\1\53\1\0\1\53\1\0\1\53"+
    "\1\0\2\53\3\0\1\53\12\0\1\u019c\10\53\1\0"+
    "\1\53\3\0\7\53\2\0\2\53\1\0\5\53\1\0"+
    "\10\53\1\0\5\53\1\0\1\53\1\0\1\53\1\0"+
    "\1\53\1\0\2\53\3\0\1\53\12\0\2\53\1\u019d"+
    "\6\53\1\0\1\53\3\0\7\53\2\0\2\53\1\0"+
    "\5\53\1\0\10\53\1\0\5\53\1\0\1\53\1\0"+
    "\1\53\1\0\1\53\1\0\2\53\3\0\1\53\12\0"+
    "\11\53\1\0\1\53\3\0\1\53\1\u019e\5\53\2\0"+
    "\2\53\1\0\5\53\1\0\10\53\1\0\5\53\1\0"+
    "\1\53\1\0\1\53\1\0\1\53\1\0\2\53\3\0"+
    "\1\53\12\0\11\53\1\0\1\53\3\0\1\53\1\u019f"+
    "\5\53\2\0\2\53\1\0\5\53\1\0\10\53\1\0"+
    "\5\53\1\0\1\53\1\0\1\53\1\0\1\53\1\0"+
    "\2\53\3\0\1\53\12\0\11\53\1\0\1\53\3\0"+
    "\7\53\2\0\2\53\1\0\1\53\1\u01a0\3\53\1\0"+
    "\10\53\1\0\5\53\1\0\1\53\1\0\1\53\1\0"+
    "\1\53\1\0\2\53\3\0\1\53\12\0\6\53\1\u01a1"+
    "\2\53\1\0\1\53\3\0\7\53\2\0\2\53\1\0"+
    "\5\53\1\0\10\53\1\0\5\53\1\0\1\53\1\0"+
    "\1\53\1\0\1\53\1\0\2\53\3\0\1\53\12\0"+
    "\11\53\1\0\1\53\3\0\7\53\2\0\2\53\1\0"+
    "\5\53\1\0\6\53\1\u01a2\1\53\1\0\5\53\1\0"+
    "\1\53\1\0\1\53\1\0\1\53\1\0\2\53\3\0"+
    "\1\53\12\0\1\53\1\u01a3\7\53\1\0\1\53\3\0"+
    "\7\53\2\0\2\53\1\0\5\53\1\0\10\53\1\0"+
    "\5\53\1\0\1\53\1\0\1\53\1\0\1\53\1\0"+
    "\2\53\3\0\1\53\12\0\1\53\1\u01a4\7\53\1\0"+
    "\1\53\3\0\7\53\2\0\2\53\1\0\5\53\1\0"+
    "\10\53\1\0\5\53\1\0\1\53\1\0\1\53\1\0"+
    "\1\53\1\0\1\u01a5\1\53\3\0\1\53\12\0\11\53"+
    "\1\0\1\53\3\0\7\53\2\0\2\53\1\0\5\53"+
    "\1\0\10\53\1\0\5\53\1\0\1\53\1\0\1\53"+
    "\1\0\1\53\1\0\2\53\3\0\1\53\12\0\1\u01a6"+
    "\10\53\1\0\1\53\3\0\7\53\2\0\2\53\1\0"+
    "\5\53\1\0\10\53\1\0\5\53\1\0\1\53\1\0"+
    "\1\53\1\0\1\53\1\0\2\53\3\0\1\53\12\0"+
    "\1\u01a7\10\53\1\0\1\53\3\0\7\53\2\0\2\53"+
    "\1\0\5\53\1\0\10\53\1\0\5\53\1\0\1\53"+
    "\1\0\1\53\1\0\1\53\1\0\1\u01a8\1\53\3\0"+
    "\1\53\12\0\11\53\1\0\1\53\3\0\7\53\2\0"+
    "\2\53\1\0\5\53\1\0\10\53\1\0\5\53\1\0"+
    "\1\53\1\0\1\53\1\0\1\53";

  private static int [] zzUnpackTrans() {
    int [] result = new int[22494];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\40\1\2\11\4\1\3\11"+
    "\1\0\2\11\1\1\1\11\1\1\1\11\1\1\1\11"+
    "\1\1\3\11\23\1\2\11\7\0\2\11\3\1\2\11"+
    "\5\1\1\11\6\1\1\11\5\1\1\11\1\1\1\11"+
    "\2\1\1\11\12\1\3\11\25\1\7\0\3\1\1\11"+
    "\21\1\1\11\1\0\2\11\36\1\7\0\22\1\1\0"+
    "\33\1\5\0\1\11\2\0\21\1\1\11\23\1\3\0"+
    "\2\11\2\0\37\1\1\0\1\11\2\0\33\1\1\11"+
    "\2\0\46\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[424];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String lexema;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 212) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;           
    int totalRead = 0;
    while (totalRead < requested) {
      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
      if (numRead == -1) {
        break;
      }
      totalRead += numRead;
    }

    if (totalRead > 0) {
      zzEndRead += totalRead;
      if (totalRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      return false;
    }

    // totalRead = 0: End of stream
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { return ERROR;
          }
        case 118: break;
        case 2: 
          { return MENOS;
          }
        case 119: break;
        case 3: 
          { /*Ignore*/
          }
        case 120: break;
        case 4: 
          { return DIVISION;
          }
        case 121: break;
        case 5: 
          { return ASIGNACION;
          }
        case 122: break;
        case 6: 
          { return MAS;
          }
        case 123: break;
        case 7: 
          { return MULTIPLICACION;
          }
        case 124: break;
        case 8: 
          { return T_NS_SEPARATOR;
          }
        case 125: break;
        case 9: 
          { return COMA;
          }
        case 126: break;
        case 10: 
          { lexema=yytext(); return ID;
          }
        case 127: break;
        case 11: 
          { lexema=yytext(); return ENTERO;
          }
        case 128: break;
        case 12: 
          { lexema=yytext(); return MF;
          }
        case 129: break;
        case 13: 
          { return T_DEC;
          }
        case 130: break;
        case 14: 
          { return T_MINUS_EQUAL;
          }
        case 131: break;
        case 15: 
          { return T_OBJECT_OPERATOR;
          }
        case 132: break;
        case 16: 
          { lexema=yytext(); return CADENA;
          }
        case 133: break;
        case 17: 
          { return T_CONCAT_EQUAL;
          }
        case 134: break;
        case 18: 
          { lexema=yytext(); return VARIABLE;
          }
        case 135: break;
        case 19: 
          { return T_DOLLAR_OPEN_CURLY_BRACES;
          }
        case 136: break;
        case 20: 
          { return T_DIV_EQUAL;
          }
        case 137: break;
        case 21: 
          { return IGUAL;
          }
        case 138: break;
        case 22: 
          { return T_DOUBLE_ARROW;
          }
        case 139: break;
        case 23: 
          { return DIFERENTE;
          }
        case 140: break;
        case 24: 
          { return T_PLUS_EQUAL;
          }
        case 141: break;
        case 25: 
          { return T_INC;
          }
        case 142: break;
        case 26: 
          { return T_MUL_EQUAL;
          }
        case 143: break;
        case 27: 
          { return T_POW;
          }
        case 144: break;
        case 28: 
          { return T_LOGIAL_OR;
          }
        case 145: break;
        case 29: 
          { return T_AS;
          }
        case 146: break;
        case 30: 
          { return T_AND_EQUAL;
          }
        case 147: break;
        case 31: 
          { return T_BOOLEAN_AND;
          }
        case 148: break;
        case 32: 
          { return T_OR_EQUAL;
          }
        case 149: break;
        case 33: 
          { return T_BOOLEAN_OR;
          }
        case 150: break;
        case 34: 
          { return T_CLOSE_TAG;
          }
        case 151: break;
        case 35: 
          { return T_IS_GREATER_OR_EQUAL;
          }
        case 152: break;
        case 36: 
          { return T_SR;
          }
        case 153: break;
        case 37: 
          { return T_IF;
          }
        case 154: break;
        case 38: 
          { return T_CURLY_OPEN;
          }
        case 155: break;
        case 39: 
          { return T_DO;
          }
        case 156: break;
        case 40: 
          { return T_DOUBLE_COLON;
          }
        case 157: break;
        case 41: 
          { return T_IS_SMALLER_OR_EQUAL;
          }
        case 158: break;
        case 42: 
          { return T_OPEN_TAG;
          }
        case 159: break;
        case 43: 
          { return T_IS_NOT_EQUAL;
          }
        case 160: break;
        case 44: 
          { return T_SL;
          }
        case 161: break;
        case 45: 
          { return T_MOD_EQUAL;
          }
        case 162: break;
        case 46: 
          { lexema=yytext(); return FLOAT;
          }
        case 163: break;
        case 47: 
          { return T_IS_IDENTICAL;
          }
        case 164: break;
        case 48: 
          { return T_IS_NOT_IDENTICAL;
          }
        case 165: break;
        case 49: 
          { return T_POW_EQUAL;
          }
        case 166: break;
        case 50: 
          { return T_LOGICAL_AND;
          }
        case 167: break;
        case 51: 
          { return T_NEW;
          }
        case 168: break;
        case 52: 
          { return T_SR_EQUAL;
          }
        case 169: break;
        case 53: 
          { return T_EXIT;
          }
        case 170: break;
        case 54: 
          { return T_FOR;
          }
        case 171: break;
        case 55: 
          { return T_LOGICAL_XOR;
          }
        case 172: break;
        case 56: 
          { return T_OPEN_TAG_WITH_ECHO;
          }
        case 173: break;
        case 57: 
          { return T_SL_EQUAL;
          }
        case 174: break;
        case 58: 
          { return T_START_HEREDOC;
          }
        case 175: break;
        case 59: 
          { return T_ECHO;
          }
        case 176: break;
        case 60: 
          { return T_ELSE;
          }
        case 177: break;
        case 61: 
          { return T_EVAL;
          }
        case 178: break;
        case 62: 
          { return T_CASE;
          }
        case 179: break;
        case 63: 
          { return T_LIST;
          }
        case 180: break;
        case 64: 
          { return T_GOTO;
          }
        case 181: break;
        case 65: 
          { return T_ENDIF;
          }
        case 182: break;
        case 66: 
          { return T_EMPTY;
          }
        case 183: break;
        case 67: 
          { return T_CONST;
          }
        case 184: break;
        case 68: 
          { return T_CATCH;
          }
        case 185: break;
        case 69: 
          { return T_CLONE;
          }
        case 186: break;
        case 70: 
          { return T_CLASS;
          }
        case 187: break;
        case 71: 
          { return T_ARRAY;
          }
        case 188: break;
        case 72: 
          { return T_BREAK;
          }
        case 189: break;
        case 73: 
          { return T_INT_CAST;
          }
        case 190: break;
        case 74: 
          { return T_ISSET;
          }
        case 191: break;
        case 75: 
          { return T_FINAL;
          }
        case 192: break;
        case 76: 
          { return T_PRINT;
          }
        case 193: break;
        case 77: 
          { return T_ELSEIF;
          }
        case 194: break;
        case 78: 
          { return T_ENDFOR;
          }
        case 195: break;
        case 79: 
          { return T_STATIC;
          }
        case 196: break;
        case 80: 
          { return T_RETURN;
          }
        case 197: break;
        case 81: 
          { return T_BOOL_CAST;
          }
        case 198: break;
        case 82: 
          { return T_DOUBLE_CAST;
          }
        case 199: break;
        case 83: 
          { return T_PUBLIC;
          }
        case 200: break;
        case 84: 
          { return T_GLOBAL;
          }
        case 201: break;
        case 85: 
          { return T_DIR;
          }
        case 202: break;
        case 86: 
          { return T_EXTENDS;
          }
        case 203: break;
        case 87: 
          { return T_REQUIRE;
          }
        case 204: break;
        case 88: 
          { return T_ARRAY_CAST;
          }
        case 205: break;
        case 89: 
          { return T_INCLUDE;
          }
        case 206: break;
        case 90: 
          { return T_DECLARE;
          }
        case 207: break;
        case 91: 
          { return T_DEFAULT;
          }
        case 208: break;
        case 92: 
          { return T_FOREACH;
          }
        case 209: break;
        case 93: 
          { return T_FINALLY;
          }
        case 210: break;
        case 94: 
          { return T_PRIVATE;
          }
        case 211: break;
        case 95: 
          { return T_LINE;
          }
        case 212: break;
        case 96: 
          { return T_FILE;
          }
        case 213: break;
        case 97: 
          { return T_ENDWHILE;
          }
        case 214: break;
        case 98: 
          { return T_CONTINUE;
          }
        case 215: break;
        case 99: 
          { return T_CALLABLE;
          }
        case 216: break;
        case 100: 
          { return T_ABSTRACT;
          }
        case 217: break;
        case 101: 
          { return T_OBJECT_CAST;
          }
        case 218: break;
        case 102: 
          { return T_FUNCTION;
          }
        case 219: break;
        case 103: 
          { return T_CLASS_C;
          }
        case 220: break;
        case 104: 
          { return T_ENDSWITCH;
          }
        case 221: break;
        case 105: 
          { return T_FUNC_C;
          }
        case 222: break;
        case 106: 
          { return T_NAMESPACE;
          }
        case 223: break;
        case 107: 
          { return T_INSTEADOF;
          }
        case 224: break;
        case 108: 
          { return T_INTERFACE;
          }
        case 225: break;
        case 109: 
          { return T_PROTECTED;
          }
        case 226: break;
        case 110: 
          { return T_METHOD_C;
          }
        case 227: break;
        case 111: 
          { return T_ENDDECLARE;
          }
        case 228: break;
        case 112: 
          { return T_ENDFOREACH;
          }
        case 229: break;
        case 113: 
          { return T_INSTANCEOF;
          }
        case 230: break;
        case 114: 
          { return T_IMPLEMENTS;
          }
        case 231: break;
        case 115: 
          { return T_REQUIRE_ONCE;
          }
        case 232: break;
        case 116: 
          { return T_INCLUDE_ONCE;
          }
        case 233: break;
        case 117: 
          { return T_NS_C;
          }
        case 234: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
